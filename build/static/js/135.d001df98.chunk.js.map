{"version":3,"file":"static/js/135.d001df98.chunk.js","mappings":"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","sources":["pages/Card/CardComponent/QRCodeModal/QRCodeModal.js","pages/Card/CardComponent/NotesModal/NoteModal.js","components/Modal/Modal.js","pages/Card/CardComponent/CardComponent.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport QRCode from 'qrcode.react';\r\n\r\nfunction QRCodeModal({ isOpen, onClose, id, card_id }) {\r\n  return (\r\n    <>\r\n      {isOpen && (\r\n        <div className=\"modal-overlay\" onClick={onClose}>\r\n          <div className=\"qr-modal-content\">\r\n            <div className=\"qr-code-container\">\r\n              <QRCode\r\n                value={`https://app.bravanfc.com/${id}/cards/${card_id}`}\r\n                size={256} // Increase the size of the QR code\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nQRCodeModal.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  card_id: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default QRCodeModal;\r\n","import React from 'react';\r\nimport './NoteModal.scss';\r\nimport axios from 'axios';\r\n\r\nconst NoteModal = ({ isOpen, closeModal, notes, background_image, loading, profile_image_url }) => {\r\n\r\n  return (\r\n    <>\r\n      {isOpen && (\r\n        <div className=\"note-modal\">\r\n          <div className=\"note-modal-background\" onClick={closeModal}></div>\r\n          <div className=\"note-modal-content\">\r\n            <button className=\"modal-close\" onClick={closeModal}>X</button> {/* Close button */}\r\n            <div className=\"note-card-component-header\">\r\n              {loading ? (\r\n                <p>Loading...</p>\r\n              ) : (\r\n                <>\r\n                  <img className=\"note-card-image\" rel='preload' loading=\"lazy\" src={profile_image_url || 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/brava.jpg?v=1713204195'} alt=\"Profile\" />\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className=\"note-box\">\r\n              <img src={background_image}/>\r\n              <h1>Extra Information</h1>\r\n              <p>{notes}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoteModal;\r\n","import React, { useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport './Modal.css'\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\nconst Modal = ({ isOpen, onClose }) => {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    company: '',\r\n    sector:'',\r\n    phone:'',\r\n    email: '',\r\n    message: '',\r\n  });\r\n\r\n  const {id: userId} = useParams()\r\n\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    const newValue = type === 'checkbox' ? checked : value;\r\n    setFormData((prevData) => ({ ...prevData, [name]: newValue }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const updatedFormData = {...formData, terms: e.target.terms.checked}\r\n\r\n  axios.post(`https://${process.env.REACT_APP_HOST}/api/${userId}/message`, updatedFormData)\r\n  .then((res) => {\r\n    console.log('Response Headers:', res.headers);\r\n    if (res.status === 200) {\r\n      alert(\"Message sent successfully\");\r\n      setFormData({\r\n        name: '',\r\n        company: '',\r\n        sector:'',\r\n        phone:'',\r\n        email: '',\r\n        message: '',\r\n        terms: false,\r\n      });\r\n    }\r\n  })\r\n  .catch((err) => {\r\n    console.log(err.response.status);\r\n    console.log(err);\r\n  });\r\n\r\n\r\n    // Add your logic to handle form submission\r\n    console.log('Form submitted:', formData);\r\n    onClose(); // Close the modal after submission\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isOpen && (\r\n       <div className=\"modal-overlay\">\r\n       <div className=\"modal-content\">\r\n         <h2 className='modal-title'>Exchange Contact</h2>\r\n         <form onSubmit={handleSubmit}>\r\n           <label htmlFor=\"name\">Name:</label>\r\n           <input\r\n             type=\"text\"\r\n             id=\"name\"\r\n             name=\"name\"\r\n             placeholder=''\r\n             value={formData.name}\r\n             onChange={handleChange}\r\n             required\r\n           />\r\n           <label htmlFor=\"phone\">Phone:</label>\r\n           <input\r\n             type=\"phone\"\r\n             id=\"phone\"\r\n             name=\"phone\"\r\n             placeholder=''\r\n             value={formData.phone}\r\n             onChange={handleChange}\r\n             required\r\n           />\r\n           <label htmlFor=\"sector\">Sector:</label>\r\n           <input\r\n             type=\"sector\"\r\n             id=\"sector\"\r\n             name=\"sector\"\r\n             placeholder=''\r\n             value={formData.sector}\r\n             onChange={handleChange}\r\n             required\r\n           />\r\n           <label htmlFor=\"company\">Company:</label>\r\n           <input\r\n             type=\"text\"\r\n             id=\"company\"\r\n             name=\"company\"\r\n             placeholder=''\r\n             value={formData.company}\r\n             onChange={handleChange}\r\n             required\r\n           />\r\n           <label htmlFor=\"email\">Email:</label>\r\n           <input\r\n             type=\"email\"\r\n             id=\"email\"\r\n             name=\"email\"\r\n             placeholder=''\r\n             value={formData.email}\r\n             onChange={handleChange}\r\n             required\r\n           />\r\n           <label htmlFor=\"message\">Message:</label>\r\n           <textarea\r\n             id=\"message\"\r\n             name=\"message\"\r\n             placeholder='What would you like to say?'\r\n             value={formData.message}\r\n             onChange={handleChange}\r\n             required\r\n           />\r\n          \r\n           <div className='terms-container'>\r\n             <input\r\n               type=\"checkbox\"\r\n               id=\"terms\"\r\n               name=\"terms\"\r\n               required\r\n             />\r\n             <label htmlFor=\"terms\">I agree to the <a href=\"/terms-and-conditions\" target=\"_blank\" rel=\"noopener noreferrer\">terms and conditions</a></label>\r\n           </div>\r\n           <button className='submit-button' type=\"submit\">Submit</button>\r\n           <button className=\"close-button\" onClick={onClose}>X</button>\r\n         </form>\r\n       </div>\r\n     </div>\r\n     \r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { S3, GetObjectCommand } from '@aws-sdk/client-s3';\r\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\r\nimport QRCode from 'qrcode.react'; \r\nimport QRCodeModal from './QRCodeModal/QRCodeModal';\r\nimport vcf from 'vcf';\r\nimport { openDB } from 'idb';\r\nimport unorm from 'unorm';\r\nimport NoteModal from './NotesModal/NoteModal';\r\nimport Modal from '../../../components/Modal/Modal';\r\nimport GoogleReviewsLogo from './Logos/googlereview.png';\r\nimport './CardComponent.css';\r\nimport axios from 'axios';\r\n\r\n\r\nconst  FacebookLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-facebook.svg?v=1712083465';\r\nconst InstagramLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-instagram.svg?v=1712083465';\r\nconst LinkedInLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-linkedin.svg?v=1712083465';\r\nconst UrlLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/url.png?v=1712083467';\r\nconst MapsLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-google-maps-old.svg?v=1712083465';\r\nconst YouTubeLogo = \"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-youtube.svg?v=1712083465\";\r\nconst PaypalLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-paypal.svg?v=1712083465'\r\nconst TiktokLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/tiktok.png?v=1713213933'\r\nconst TwitterLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-twitterx.svg?v=1712083465'\r\nconst SpotifyLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/spotify.png?v=1712083467'\r\nconst VintedLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/vinted.jpg?v=1712083466'\r\nconst NotesLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/notes.png?v=1713213932'\r\nconst StandvirtualLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/standvirtual.png?v=1713213933'\r\nconst OlxLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/olx.png?v=1713213932'\r\nconst PiscapiscaLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/piscapisca.png?v=1713213932'\r\nconst CustojustoLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/custojusto.png?v=1713213932'\r\n\r\n\r\n\r\nfunction CardComponent({\r\n  card_id,\r\n  id,\r\n  email,\r\n  username,\r\n  phone,\r\n  company,\r\n  title,\r\n  profile_image_url,\r\n  background_image_url,\r\n  onLoad,\r\n  facebook,\r\n  linkedin,\r\n  instagram,\r\n  google_reviews,\r\n  address,\r\n  youtube,\r\n  notes,\r\n  url,\r\n  paypal,\r\n  tiktok,\r\n  twitter,\r\n  spotify,\r\n  vinted,\r\n  standvirtual,\r\n  olx,\r\n  piscapisca,\r\n  custojusto,\r\n  linkId\r\n}) {\r\n  const [image, setImage] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [showQRCode, setShowQRCode] = useState(false);\r\n\r\n  const [isNotesOpen, setIsNotesOpen] = useState(false);\r\n  const accessKeyId = process.env.REACT_APP_AWS_ACCESS_KEY_ID;\r\n  const secretAccessKey =  process.env.REACT_APP_AWS_SECRET_ACCESS_KEY;\r\n  const Region =  process.env.REACT_APP_S3_REGION;\r\n  const Bucket =  process.env.REACT_APP_BUCKET;\r\n  let mapsUrl;\r\n\r\n  const [clickCounts, setClickCounts] = useState({\r\n    google_reviews: 0,\r\n    instagram: 0,\r\n    facebook: 0,\r\n    linkedin: 0,\r\n    youtube: 0,\r\n    paypal: 0,\r\n    twitter: 0,\r\n    tiktok: 0,\r\n    spotify: 0,\r\n    vinted: 0,\r\n    notes: 0,\r\n    address: 0,\r\n    standvirtual: 0,\r\n    olx: 0,\r\n    piscapisca: 0,\r\n    custojusto: 0,\r\n    url:0\r\n  });\r\n\r\n  useEffect(() => {\r\n  \r\n    let isMounted = true;\r\n  \r\n    const loadImageAndSetState = async () => {\r\n  \r\n      const imageBuffer = await loadImageFromIndexedDB();\r\n  \r\n      if (isMounted) {\r\n        if (imageBuffer) {\r\n          const blob = new Blob([imageBuffer], { type: 'image/jpg' });\r\n          setImage(blob);\r\n          setLoading(false);\r\n        } else {\r\n          fetchImage();\r\n        }\r\n      }\r\n    };\r\n  \r\n    loadImageAndSetState();\r\n  \r\n    return () => {\r\n      isMounted = false;\r\n  \r\n      if (image) {\r\n        URL.revokeObjectURL(image);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n\r\n  const openQRCodeModal = () => {\r\n    setShowQRCode(true)\r\n  }\r\n  const closeQRCodeModal = () => {\r\n    setShowQRCode(false)\r\n  }\r\n  \r\n \r\n  const openModal = () => {\r\n    setIsModalOpen(true);\r\n    \r\n  };\r\n const handleOpenNotes = () => {\r\n  setIsNotesOpen(true);\r\n }\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n\r\n  const openGoogleMaps = () => {\r\n    // Construct the Google Maps URL with the address as a query parameter\r\n     mapsUrl = `https://www.google.com/maps/search/?api=1&query=${address}`;\r\n\r\n    // Open a new window or tab with the Google Maps URL\r\n    window.open(mapsUrl, '_blank');\r\n  };\r\n  const initIndexedDB = async () => {\r\n    try {\r\n      const db = await openDB('brava-db', 1, {\r\n        upgrade(db) {\r\n          if (!db.objectStoreNames.contains('images')) {\r\n            const imagesStore = db.createObjectStore('images', { keyPath: 'key' });\r\n            imagesStore.createIndex('url', 'url', { unique: true });\r\n          }\r\n        },\r\n      });\r\n      return db;\r\n    } catch (error) {\r\n      console.error('Error initializing IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n \r\n\r\n\r\n  const saveImageToIndexedDB = async (imageBlob) => {\r\n    try {\r\n      const db = await initIndexedDB();\r\n      const tx = db.transaction('images', 'readwrite');\r\n      const store = tx.objectStore('images');\r\n  \r\n      // Use a unique key, such as the S3 key, assuming it's unique for each image\r\n      const key = 'profileImage';\r\n      \r\n      // Create an object with a URL (if needed) and the image data\r\n      const data = {\r\n        key,\r\n        url: profile_image_url,  // Add the URL if it's necessary for your use case\r\n        data: imageBlob,\r\n      };\r\n  \r\n      // Store the data in IndexedDB\r\n      store.put(data);\r\n  \r\n      // Complete the transaction\r\n      await tx.complete;\r\n      \r\n      console.log('Image stored in IndexedDB:', data);\r\n    } catch (error) {\r\n      console.error('Error storing image in IndexedDB:', error);\r\n    }\r\n  };\r\n\r\n  const loadImageFromIndexedDB = async () => {\r\n    try {\r\n      const db = await initIndexedDB();\r\n      const tx = db.transaction('images');\r\n      const store = tx.objectStore('images');\r\n      const entry = await store.get('profileImage');\r\n  \r\n      return entry ? entry.data : null;\r\n    } catch (error) {\r\n      console.error('Error loading from IndexedDB:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const fetchImage = async () => {\r\n    try {\r\n      const s3Client = new S3({\r\n        credentials: {\r\n          accessKeyId,\r\n          secretAccessKey,\r\n        },\r\n        region: Region,\r\n      });\r\n  \r\n      // Parse the profile_image_url to extract the S3 key\r\n      const urlObject = new URL(profile_image_url);\r\n      const key = decodeURIComponent(urlObject.pathname.replace(/^\\//, ''));\r\n  \r\n      const getObjectParams = {\r\n        Bucket,\r\n        Key: key,\r\n      };\r\n  \r\n      const command = new GetObjectCommand(getObjectParams);\r\n      const response = await s3Client.send(command);\r\n  \r\n     \r\n  \r\n      const blob = new Blob([response.Body], { type: response.ContentType });\r\n      saveImageToIndexedDB(blob);\r\n      // Save the image Blob directly to the state\r\n      setImage(blob);\r\n      setLoading(false);\r\n  \r\n      if (onLoad) {\r\n        onLoad();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching image:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const loadImageAndSetState = async () => {\r\n      const imageBuffer = await loadImageFromIndexedDB();\r\n\r\n      if (imageBuffer) {\r\n        const blob = new Blob([imageBuffer], { type: 'image/jpg' });\r\n        setImage(blob);\r\n        setLoading(false);\r\n      } else {\r\n        fetchImage();\r\n      }\r\n    };\r\n\r\n    loadImageAndSetState();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n\r\n      if (image) {\r\n        URL.revokeObjectURL(image);\r\n      }\r\n    };\r\n  }, [profile_image_url, Bucket, Region, accessKeyId, secretAccessKey, onLoad]);\r\n\r\n\r\n\r\n  const saveToContacts = async () => {\r\n    try {\r\n      const card = new vcf();\r\n      const imageBuffer = await loadImageFromIndexedDB();\r\n  \r\n      if (!imageBuffer) {\r\n        console.error('Image not found in IndexedDB.');\r\n        return;\r\n      }\r\n  \r\n      // Set basic properties\r\n  \r\n      // Manually encode special characters in the names\r\n      const removeDiacritics = (str) => unorm.nfkd(str).replace(/[\\u0300-\\u036f]/g, '');\r\n      const decodedUsername = removeDiacritics(decodeURIComponent(username));\r\n      const decodedTitle = removeDiacritics(decodeURIComponent(title));\r\n      const decodedNotes = removeDiacritics(decodeURIComponent(notes))\r\n      const decodedAddress = removeDiacritics(decodeURIComponent(address))\r\n      // Set structured name with properly encoded values\r\n      card.add('n', [decodedUsername]);\r\n  \r\n      // Set formatted name with the full, properly encoded name\r\n      card.add('fn', [decodedUsername]);\r\n  \r\n      card.add('org', company);\r\n      card.add('tel', phone);\r\n      card.add('email', email);\r\n  \r\n      // Set additional properties\r\n      card.add('title', [decodedTitle]);\r\n      card.add('url', `https://app.bravanfc.com/${id}/cards/${card_id}`);\r\n  \r\n      // Set social media properties\r\n      if (facebook) {\r\n        card.add('x-socialprofile', facebook, { type: 'Facebook' });\r\n      }\r\n      if (instagram) {\r\n        card.add('x-socialprofile', instagram, { type: 'Instagram' });\r\n      }\r\n      if (linkedin) {\r\n        card.add('x-socialprofile', linkedin, { type: 'Linkedin' });\r\n      }\r\n      if (youtube) {\r\n        card.add('x-socialprofile', youtube, { type: 'Youtube' });\r\n      }\r\n      if(notes) {\r\n        card.add('note', [decodedNotes])\r\n      }\r\n      if(twitter){\r\n        card.add('x-socialprofile', twitter, {type: 'Twitter'});\r\n      }\r\n      if(paypal){\r\n        card.add('x-socialprofile', paypal, {type: \"Paypal\"});\r\n      }\r\n      if(tiktok){\r\n        card.add('x-socialprofile', tiktok, {type: \"TikTok\"});\r\n      }\r\n      if(spotify){\r\n        card.add('x-socialprofile', spotify, {type: \"Spotify\"});\r\n      }\r\n      if(vinted){\r\n        card.add('x-socialprofile', vinted, {type: \"Vinted\"});\r\n      }\r\n      if(olx){\r\n        card.add('x-social-profile', olx ,{type:\"Olx\"});\r\n      }\r\n      if(standvirtual){\r\n        card.add('x-social-profile', standvirtual ,{type:\"standvirtual\"});\r\n      }\r\n      if(piscapisca){\r\n        card.add('x-social-profile', piscapisca ,{type:\"piscapisca\"});\r\n      }\r\n      if(custojusto){\r\n        card.add('x-social-profile', custojusto ,{type:\"custojusto\"});\r\n      }\r\n  \r\n  \r\n      // Set address\r\n      card.add('adr', [decodedAddress]);\r\n\r\n      // Extract the S3 key from the profile_image_url\r\n      const urlObject = new URL(profile_image_url);\r\n      const imageKey = decodeURIComponent(urlObject.pathname.replace(/^\\//, ''));\r\n  \r\n      // Generate a pre-signed URL for the image\r\n      const imageURL = await generatePresignedURL(imageKey);\r\n  \r\n      const encodedImage = await fetchAndEncodeImage(imageURL);\r\n      if (!encodedImage) {\r\n        console.error('Error fetching and encoding image.');\r\n        return;\r\n      }\r\n  \r\n      // Set image in vCard\r\n      card.add('photo', encodedImage, { encoding: 'b', type: 'image/jpeg' });\r\n  \r\n      // Generate vCard data as a string\r\n      const vCardData = card.toString('3.0');\r\n      console.log(vCardData);\r\n  \r\n      // Create a Blob from the vCard data with explicit UTF-8 encoding\r\n      const vcard_blob = new Blob([new TextEncoder().encode(vCardData)], {\r\n        type: 'text/vcard;charset=utf-8',\r\n      });\r\n  \r\n      // Open a new URL to prompt the user to add the contact\r\n      const downloadLink = document.createElement('a');\r\n      downloadLink.href = URL.createObjectURL(vcard_blob);\r\n      downloadLink.download = 'contact.vcf';\r\n  \r\n      // Trigger a click event to simulate a download prompt\r\n       // Redirect the user to the vCard file\r\n    window.location.href = URL.createObjectURL(vcard_blob);\r\n\r\n    // Release the object URL\r\n    URL.revokeObjectURL(vcard_blob);\r\n    } catch (error) {\r\n      console.error('Error saving to contacts:', error);\r\n    }\r\n  };\r\n  \r\n  // Function to fetch and encode the image\r\n  const fetchAndEncodeImage = async (imageUrl) => {\r\n    try {\r\n      const response = await fetch(imageUrl);\r\n      const imageBlob = await response.blob();\r\n  \r\n      // Resize and compress the image with a lower quality\r\n      const resizedAndCompressedBase64 = await resizeAndCompressImage(imageBlob, {\r\n        maxWidth: 800,\r\n        maxHeight: 800,\r\n        quality: 0.9, // Adjust the quality as needed\r\n      });\r\n  \r\n      return resizedAndCompressedBase64;\r\n    } catch (error) {\r\n      console.error('Error fetching, resizing, and encoding image:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  const resizeAndCompressImage = async (blob, options) => {\r\n    try {\r\n      const image = new Image();\r\n      image.src = URL.createObjectURL(blob);\r\n  \r\n      await new Promise((resolve, reject) => {\r\n        image.onload = resolve;\r\n        image.onerror = reject;\r\n      });\r\n  \r\n      const { maxWidth, maxHeight, quality } = options;\r\n  \r\n      let width = image.width;\r\n      let height = image.height;\r\n  \r\n      if (width > height) {\r\n        if (width > maxWidth) {\r\n          height *= maxWidth / width;\r\n          width = maxWidth;\r\n        }\r\n      } else {\r\n        if (height > maxHeight) {\r\n          width *= maxHeight / height;\r\n          height = maxHeight;\r\n        }\r\n      }\r\n  \r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      const context = canvas.getContext('2d');\r\n  \r\n      // Draw the image on the canvas progressively\r\n      context.drawImage(image, 0, 0, width, height);\r\n  \r\n      // Convert the canvas content to a blob\r\n      const resizedBlob = await new Promise((resolve) => {\r\n        canvas.toBlob(resolve, 'image/jpeg', quality);\r\n      });\r\n  \r\n      // Convert the resized blob to base64\r\n      const resizedBlobBuffer = await new Response(resizedBlob).arrayBuffer();\r\n      const resizedBlobBase64 = btoa(\r\n        new Uint8Array(resizedBlobBuffer).reduce((data, byte) => data + String.fromCharCode(byte), '')\r\n      );\r\n  \r\n      return resizedBlobBase64;\r\n    } catch (error) {\r\n      console.error('Error resizing and compressing image:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  const generatePresignedURL = async (imageKey) => {\r\n    try {\r\n      const s3Client = new S3({\r\n        region: 'eu-west-2',\r\n        credentials: {\r\n          accessKeyId: accessKeyId,\r\n          secretAccessKey: secretAccessKey,\r\n        },\r\n      });\r\n  \r\n      const params = {\r\n        Bucket: 'brava-bucket',\r\n        Key: imageKey,\r\n        Expires: 900,\r\n      };\r\n  \r\n      const signedURL =  getSignedUrl(s3Client, new GetObjectCommand(params));\r\n      console.log(signedURL)\r\n      return signedURL;\r\n    } catch (error) {\r\n      console.error('Error generating pre-signed URL:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  const handleCloseNotes = () => {\r\n    setIsNotesOpen(false); // Set the state to close the modal\r\n  };\r\n\r\n\r\n  const handleGetInTouch = () => {\r\n    try {\r\n      // Instead of triggering a download, open the modal\r\n      openModal();\r\n    } catch (error) {\r\n      console.error('Error opening modal:', error);\r\n    }\r\n  };\r\n  \r\n  const handleClick = (socialMedia) => {\r\n    const updatedCounts = { ...clickCounts, [socialMedia]: clickCounts[socialMedia] + 1 };\r\n    setClickCounts(updatedCounts);\r\n  \r\n  \r\n    // Send the updated count to the server only if the clicked icon has an href\r\n      axios.post(`https://${process.env.REACT_APP_HOST}/api/${linkId}/leads`, updatedCounts)\r\n        .then((response) => {\r\n          console.log(response);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error sending click counts:', error);\r\n        });\r\n  };\r\n  \r\n\r\n\r\n  return (\r\n    <div className={`card-component ${loading ? 'loading' : ''}`}>\r\n      <div className=\"card-background\" style={{ backgroundImage: `url(${background_image_url || 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/brava_Front4-removebg-preview.png?v=1712164655'})` }}></div>\r\n      <div className=\"card-component-header\">\r\n        {loading ? (\r\n          <p>Loading...</p>\r\n        ) : (\r\n          <>\r\n            <img className=\"card-image\" rel='preload' loading=\"lazy\" src={profile_image_url || 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/brava.jpg?v=1713204195'} alt=\"Profile\" />\r\n          </>\r\n        )}\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <h5>{username}</h5>\r\n          <h3><span>{company}</span></h3>\r\n          <p>{title}</p>\r\n        <div className=\"card-buttons\">\r\n          <button onClick={saveToContacts}>SAVE CONTACT</button>\r\n        <button className=\"fab\" onClick={handleGetInTouch}>\r\n          EXCHANGE CONTACT\r\n        </button>\r\n        </div>\r\n        <div className=\"social-icons-container\"> \r\n        <div className=\"social-icons\">\r\n     \r\n        \r\n        <div className=\"qr-code-container\" onClick={openQRCodeModal}>\r\n        <QRCode\r\n          value={`https://app.bravanfc.com/${id}/cards/${card_id}`}\r\n          style={{ height: \"55px\", width: \"55px\", borderRadius:\"10px\" }}\r\n        />\r\n         </div>\r\n         {url && <a href={url} onClick={() => handleClick('url')}><img rel='preload' className=\"url\" loading=\"lazy\" src={UrlLogo} alt=\"Url\" focusable /></a>}\r\n      {google_reviews && <a href={google_reviews} onClick={() => handleClick('google_reviews')}><img rel='preload' loading=\"lazy\" src={GoogleReviewsLogo} alt=\"Instagram\" focusable /></a>}\r\n      {instagram && <a href={instagram} onClick={() => handleClick('instagram')}><img rel='preload' loading=\"lazy\" src={InstagramLogo} alt=\"Instagram\" focusable /></a>}\r\n      {facebook && <a href={facebook} onClick={() => handleClick('facebook')}><img rel='preload' loading=\"lazy\" src={FacebookLogo} alt=\"Facebook\" focusable /></a>}\r\n      {linkedin && <a href={linkedin} onClick={() => handleClick('linkedin')}><img rel='preload' loading=\"lazy\" src={LinkedInLogo} alt=\"LinkedIn\" focusable /></a>}\r\n      {youtube && <a href={youtube} onClick={() => handleClick('youtube')}><img rel='preload' loading=\"lazy\" src={YouTubeLogo} alt=\"YouTube\" focusable /></a>}\r\n      {paypal && <a href={paypal} onClick={() => handleClick('paypal')}><img rel='preload' loading=\"lazy\" src={PaypalLogo} alt=\"Paypal\" focusable /></a>}\r\n      {twitter && <a href={twitter} onClick={() => handleClick('twitter')}><img rel='preload' loading=\"lazy\" src={TwitterLogo} alt=\"Twitter\" focusable /></a>}\r\n      {tiktok && <a href={tiktok} onClick={() => handleClick('tiktok')}><img rel='preload' loading=\"lazy\" src={TiktokLogo} alt=\"TikTok\" focusable  style={{ height: \"80px\", width: \"80px\"}} /></a>}\r\n      {spotify && <a  href={spotify} onClick={() => handleClick('spotify')}><img rel='preload' className='spotify' loading=\"lazy\" src={SpotifyLogo} alt=\"Spotify\" focusable /></a>}\r\n      {vinted && <a  href={vinted} onClick={() => handleClick('vinted')}><img rel='preload' className='spotify' loading=\"lazy\" src={VintedLogo} alt=\"Vinted\" focusable style={{ borderRadius:\"20px\"}} /></a>}\r\n      {notes && <a onClick={() => {handleClick('notes'); handleOpenNotes()}}><img rel='preload' loading=\"lazy\"style={{ height:\"60px\"}} src={NotesLogo} alt=\"Notes\" focusable /></a>}\r\n    {address && <a href={mapsUrl} onClick={() => {handleClick('address'); openGoogleMaps()}}><img rel='preload' loading='lazy' src={MapsLogo}  alt='Maps' focusable/></a>}\r\n      {standvirtual && <a href={standvirtual} onClick={() => handleClick('standvirtual')}><img rel='preload' loading='lazy' src={StandvirtualLogo} style={{height:\"60px\", borderRadius:\"10px\"}} alt='standvirtual' focusable/></a>}\r\n      {olx && <a href={olx} onClick={() => handleClick('olx')}><img rel='preload' loading='lazy' src={OlxLogo} alt='olx' focusable style={{height:\"60px\", borderRadius:\"10px\"}}/></a>}\r\n      {piscapisca && <a href={piscapisca} onClick={() => handleClick('piscapisca')}><img rel='preload' loading='lazy' src={PiscapiscaLogo} alt='piscapisca' focusable style={{height:\"60px\", borderRadius:\"10px\"}}/></a>}\r\n      {custojusto && <a href={custojusto} onClick={() => handleClick('custojusto')}><img rel='preload' loading='lazy' src={CustojustoLogo} alt='custojusto' focusable style={{height:\"60px\", borderRadius:\"10px\"}}/></a>}\r\n        </div>\r\n      </div>\r\n      </div>\r\n      <p style={{color:'white'}}>Powered by <a style={{color:'white'}} href=\"https://bravanfc.com\" target='_blank'>BRAVA</a></p>\r\n      <Modal isOpen={isModalOpen} onClose={closeModal} />\r\n      <NoteModal isOpen={isNotesOpen} background_image={background_image_url} profile_image_url={profile_image_url} closeModal={handleCloseNotes} notes={notes} />\r\n      <QRCodeModal\r\n        isOpen={showQRCode}\r\n        onClose={closeQRCodeModal}\r\n        id={id}\r\n        card_id={String(card_id)}\r\n      />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nCardComponent.propTypes = {\r\n  email: PropTypes.string.isRequired,\r\n  phone: PropTypes.string.isRequired,\r\n  company: PropTypes.string.isRequired,\r\n  profile_image_url: PropTypes.string,\r\n  onLoad: PropTypes.func,\r\n  card_id: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  facebook: PropTypes.string.isRequired,\r\n  linkedin: PropTypes.string.isRequired,\r\n  instagram: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CardComponent;"],"names":["_ref","isOpen","onClose","id","card_id","_jsx","_Fragment","children","className","onClick","QRCode","value","concat","size","closeModal","notes","background_image","loading","profile_image_url","_jsxs","rel","src","alt","formData","setFormData","useState","name","company","sector","phone","email","message","userId","useParams","handleChange","e","type","checked","target","newValue","prevData","onSubmit","preventDefault","updatedFormData","terms","axios","post","process","then","res","console","log","headers","status","alert","catch","err","response","htmlFor","placeholder","onChange","required","href","username","title","background_image_url","onLoad","facebook","linkedin","instagram","google_reviews","address","youtube","url","paypal","tiktok","twitter","spotify","vinted","standvirtual","olx","piscapisca","custojusto","linkId","image","setImage","setLoading","isModalOpen","setIsModalOpen","showQRCode","setShowQRCode","isNotesOpen","setIsNotesOpen","accessKeyId","secretAccessKey","Region","Bucket","mapsUrl","clickCounts","setClickCounts","useEffect","isMounted","async","imageBuffer","loadImageFromIndexedDB","blob","Blob","fetchImage","loadImageAndSetState","URL","revokeObjectURL","initIndexedDB","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","error","store","transaction","objectStore","entry","get","data","s3Client","S3","credentials","region","urlObject","key","decodeURIComponent","pathname","replace","getObjectParams","Key","command","GetObjectCommand","send","Body","ContentType","tx","imageBlob","put","complete","saveImageToIndexedDB","fetchAndEncodeImage","fetch","imageUrl","resizeAndCompressImage","maxWidth","maxHeight","quality","options","Image","createObjectURL","Promise","resolve","reject","onload","onerror","width","height","canvas","document","createElement","getContext","drawImage","resizedBlob","toBlob","resizedBlobBuffer","Response","arrayBuffer","btoa","Uint8Array","reduce","byte","String","fromCharCode","generatePresignedURL","params","imageKey","Expires","signedURL","getSignedUrl","handleClick","socialMedia","updatedCounts","style","backgroundImage","card","vcf","removeDiacritics","str","unorm","decodedUsername","decodedTitle","decodedNotes","decodedAddress","add","imageURL","encodedImage","encoding","vCardData","toString","vcard_blob","TextEncoder","encode","downloadLink","download","window","location","handleGetInTouch","openQRCodeModal","borderRadius","focusable","GoogleReviewsLogo","open","color","Modal","NoteModal","handleCloseNotes","QRCodeModal","closeQRCodeModal"],"sourceRoot":""}