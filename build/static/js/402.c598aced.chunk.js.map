{"version":3,"file":"static/js/402.c598aced.chunk.js","mappings":"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","sources":["components/Modal/Modal.js","pages/Card/CardComponent/Logos/instagram.svg","pages/Card/CardComponent/Logos/youtube.svg","pages/Card/CardComponent/CardComponent.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport './Modal.css'\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\nconst Modal = ({ isOpen, onClose }) => {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    company: '',\r\n    email: '',\r\n    message: '',\r\n  });\r\n\r\n  const {id: userId} = useParams()\r\n\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({ ...prevData, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n  axios.post(`https://${process.env.REACT_APP_HOST}}/api/${userId}/message`, formData)\r\n  .then((res) => {\r\n    console.log('Response Headers:', res.headers);\r\n    if (res.status === 200) {\r\n      alert(\"Message sent successfully\");\r\n      setFormData({\r\n        name: '',\r\n        company: '',\r\n        email: '',\r\n        message: ''\r\n      });\r\n    }\r\n  })\r\n  .catch((err) => {\r\n    console.log(err.response.status);\r\n    console.log(err);\r\n  });\r\n\r\n\r\n    // Add your logic to handle form submission\r\n    console.log('Form submitted:', formData);\r\n    onClose(); // Close the modal after submission\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isOpen && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <button className=\"close-button\" onClick={onClose}>\r\n              X\r\n            </button>\r\n            <h2>GET IN TOUCH</h2>\r\n            <form onSubmit={handleSubmit}>\r\n              <label htmlFor=\"name\">Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"name\"\r\n                name=\"name\"\r\n                placeholder='Name'\r\n                value={formData.name}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n               <label htmlFor=\"company\">Company:</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"company\"\r\n                name=\"company\"\r\n                placeholder='Company'\r\n                value={formData.company}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n\r\n              <label htmlFor=\"email\">Email:</label>\r\n              <input\r\n                type=\"email\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                placeholder='Email'\r\n                value={formData.email}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n\r\n              <label htmlFor=\"message\">Message:</label>\r\n              <textarea\r\n                id=\"message\"\r\n                name=\"message\"\r\n                placeholder='What would you like to say?'\r\n                value={formData.message}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n\r\n              <button type=\"submit\">Submit</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","var _defs, _path, _path2, _path3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgInstagram(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 132.004,\n    height: 132,\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"b\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    stopColor: \"#3771c8\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#3771c8\",\n    offset: 0.128\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#60f\",\n    stopOpacity: 0\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"a\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0,\n    stopColor: \"#fd5\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.1,\n    stopColor: \"#fd5\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.5,\n    stopColor: \"#ff543e\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#c837ab\"\n  })), /*#__PURE__*/React.createElement(\"radialGradient\", {\n    id: \"c\",\n    cx: 158.429,\n    cy: 578.088,\n    r: 65,\n    xlinkHref: \"#a\",\n    gradientUnits: \"userSpaceOnUse\",\n    gradientTransform: \"matrix(0 -1.98198 1.8439 0 -1031.402 454.004)\",\n    fx: 158.429,\n    fy: 578.088\n  }), /*#__PURE__*/React.createElement(\"radialGradient\", {\n    id: \"d\",\n    cx: 147.694,\n    cy: 473.455,\n    r: 65,\n    xlinkHref: \"#b\",\n    gradientUnits: \"userSpaceOnUse\",\n    gradientTransform: \"matrix(.17394 .86872 -3.5818 .71718 1648.348 -458.493)\",\n    fx: 147.694,\n    fy: 473.455\n  }))), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"url(#c)\",\n    d: \"M65.03 0C37.888 0 29.95.028 28.407.156c-5.57.463-9.036 1.34-12.812 3.22-2.91 1.445-5.205 3.12-7.47 5.468C4 13.126 1.5 18.394.595 24.656c-.44 3.04-.568 3.66-.594 19.188-.01 5.176 0 11.988 0 21.125 0 27.12.03 35.05.16 36.59.45 5.42 1.3 8.83 3.1 12.56 3.44 7.14 10.01 12.5 17.75 14.5 2.68.69 5.64 1.07 9.44 1.25 1.61.07 18.02.12 34.44.12 16.42 0 32.84-.02 34.41-.1 4.4-.207 6.955-.55 9.78-1.28 7.79-2.01 14.24-7.29 17.75-14.53 1.765-3.64 2.66-7.18 3.065-12.317.088-1.12.125-18.977.125-36.81 0-17.836-.04-35.66-.128-36.78-.41-5.22-1.305-8.73-3.127-12.44-1.495-3.037-3.155-5.305-5.565-7.624C116.9 4 111.64 1.5 105.372.596 102.335.157 101.73.027 86.19 0H65.03z\",\n    transform: \"translate(1.004 1)\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"url(#d)\",\n    d: \"M65.03 0C37.888 0 29.95.028 28.407.156c-5.57.463-9.036 1.34-12.812 3.22-2.91 1.445-5.205 3.12-7.47 5.468C4 13.126 1.5 18.394.595 24.656c-.44 3.04-.568 3.66-.594 19.188-.01 5.176 0 11.988 0 21.125 0 27.12.03 35.05.16 36.59.45 5.42 1.3 8.83 3.1 12.56 3.44 7.14 10.01 12.5 17.75 14.5 2.68.69 5.64 1.07 9.44 1.25 1.61.07 18.02.12 34.44.12 16.42 0 32.84-.02 34.41-.1 4.4-.207 6.955-.55 9.78-1.28 7.79-2.01 14.24-7.29 17.75-14.53 1.765-3.64 2.66-7.18 3.065-12.317.088-1.12.125-18.977.125-36.81 0-17.836-.04-35.66-.128-36.78-.41-5.22-1.305-8.73-3.127-12.44-1.495-3.037-3.155-5.305-5.565-7.624C116.9 4 111.64 1.5 105.372.596 102.335.157 101.73.027 86.19 0H65.03z\",\n    transform: \"translate(1.004 1)\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#fff\",\n    d: \"M66.004 18c-13.036 0-14.672.057-19.792.29-5.11.234-8.598 1.043-11.65 2.23-3.157 1.226-5.835 2.866-8.503 5.535-2.67 2.668-4.31 5.346-5.54 8.502-1.19 3.053-2 6.542-2.23 11.65C18.06 51.327 18 52.964 18 66s.058 14.667.29 19.787c.235 5.11 1.044 8.598 2.23 11.65 1.227 3.157 2.867 5.835 5.536 8.503 2.667 2.67 5.345 4.314 8.5 5.54 3.054 1.187 6.543 1.996 11.652 2.23 5.12.233 6.755.29 19.79.29 13.037 0 14.668-.057 19.788-.29 5.11-.234 8.602-1.043 11.656-2.23 3.156-1.226 5.83-2.87 8.497-5.54 2.67-2.668 4.31-5.346 5.54-8.502 1.18-3.053 1.99-6.542 2.23-11.65.23-5.12.29-6.752.29-19.788 0-13.036-.06-14.672-.29-19.792-.24-5.11-1.05-8.598-2.23-11.65-1.23-3.157-2.87-5.835-5.54-8.503-2.67-2.67-5.34-4.31-8.5-5.535-3.06-1.187-6.55-1.996-11.66-2.23-5.12-.233-6.75-.29-19.79-.29zm-4.306 8.65c1.278-.002 2.704 0 4.306 0 12.816 0 14.335.046 19.396.276 4.68.214 7.22.996 8.912 1.653 2.24.87 3.837 1.91 5.516 3.59 1.68 1.68 2.72 3.28 3.592 5.52.657 1.69 1.44 4.23 1.653 8.91.23 5.06.28 6.58.28 19.39s-.05 14.33-.28 19.39c-.214 4.68-.996 7.22-1.653 8.91-.87 2.24-1.912 3.835-3.592 5.514-1.68 1.68-3.275 2.72-5.516 3.59-1.69.66-4.232 1.44-8.912 1.654-5.06.23-6.58.28-19.396.28-12.817 0-14.336-.05-19.396-.28-4.68-.216-7.22-.998-8.913-1.655-2.24-.87-3.84-1.91-5.52-3.59-1.68-1.68-2.72-3.276-3.592-5.517-.657-1.69-1.44-4.23-1.653-8.91-.23-5.06-.276-6.58-.276-19.398s.046-14.33.276-19.39c.214-4.68.996-7.22 1.653-8.912.87-2.24 1.912-3.84 3.592-5.52 1.68-1.68 3.28-2.72 5.52-3.592 1.692-.66 4.233-1.44 8.913-1.655 4.428-.2 6.144-.26 15.09-.27zm29.928 7.97c-3.18 0-5.76 2.577-5.76 5.758 0 3.18 2.58 5.76 5.76 5.76 3.18 0 5.76-2.58 5.76-5.76 0-3.18-2.58-5.76-5.76-5.76zm-25.622 6.73c-13.613 0-24.65 11.037-24.65 24.65 0 13.613 11.037 24.645 24.65 24.645C79.617 90.645 90.65 79.613 90.65 66S79.616 41.35 66.003 41.35zm0 8.65c8.836 0 16 7.163 16 16 0 8.836-7.164 16-16 16-8.837 0-16-7.164-16-16 0-8.837 7.163-16 16-16z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgInstagram);\nexport default __webpack_public_path__ + \"static/media/instagram.31323e66c067ca9c6941dc334ae7c20b.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgYoutube(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 576 512\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#FF0000\",\n    d: \"M549.655 139.141c-6.281-23.5-24.734-41.953-48.235-48.234C458.38 80 288 80 288 80S117.621 80 74.58 90.907c-23.5 6.281-41.954 24.734-48.235 48.234C8 182.381 8 256 8 256s0 73.619 18.345 118.86c6.281 23.5 24.735 41.953 48.235 48.234C117.62 432 288 432 288 432s170.379 0 213.42-10.907c23.5-6.281 41.954-24.734 48.235-48.234C568 329.619 568 256 568 256s0-73.619-18.345-118.86zM232 352V160l160 96-160 96z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgYoutube);\nexport default __webpack_public_path__ + \"static/media/youtube.0365909a13b3f4a04c8189245b91551b.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { S3, GetObjectCommand } from '@aws-sdk/client-s3';\r\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\r\nimport vcf from 'vcf';\r\nimport { openDB } from 'idb';\r\nimport unorm from 'unorm';\r\nimport Modal from '../../../components/Modal/Modal';\r\nimport FacebookLogo from './Logos/facebook.png';\r\nimport InstagramLogo from './Logos/instagram.svg';\r\nimport LinkedInLogo from './Logos/linkedin.png';\r\nimport NotesLogo from './Logos/notes.png';\r\nimport GoogleReviewsLogo from './Logos/googlereview.png';\r\nimport UrlLogo from './Logos/url.png';\r\nimport YouTubeLogo from \"./Logos/youtube.svg\";\r\n\r\n\r\nimport './CardComponent.css';\r\n\r\nfunction CardComponent({\r\n  card_id,\r\n  id,\r\n  email,\r\n  username,\r\n  phone,\r\n  company,\r\n  title,\r\n  profile_image_url,\r\n  background_image_url,\r\n  onLoad,\r\n  facebook,\r\n  linkedin,\r\n  instagram,\r\n  google_reviews,\r\n  address,\r\n  youtube,\r\n  notes,\r\n  url,\r\n}) {\r\n  const [image, setImage] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const accessKeyId = process.env.REACT_APP_AWS_ACCESS_KEY_ID;\r\n  const secretAccessKey =  process.env.REACT_APP_AWS_SECRET_ACCESS_KEY;\r\n  const Region =  process.env.REACT_APP_S3_REGION;\r\n  const Bucket =  process.env.REACT_APP_BUCKET;\r\n  let mapsUrl;\r\n\r\n  useEffect(() => {\r\n    console.log('CardComponent useEffect triggered');\r\n  \r\n    let isMounted = true;\r\n  \r\n    const loadImageAndSetState = async () => {\r\n  \r\n      const imageBuffer = await loadImageFromIndexedDB();\r\n  \r\n      if (isMounted) {\r\n        if (imageBuffer) {\r\n          const blob = new Blob([imageBuffer], { type: 'image/jpg' });\r\n          setImage(blob);\r\n          setLoading(false);\r\n        } else {\r\n          fetchImage();\r\n        }\r\n      }\r\n    };\r\n  \r\n    loadImageAndSetState();\r\n  \r\n    return () => {\r\n      isMounted = false;\r\n  \r\n      if (image) {\r\n        URL.revokeObjectURL(image);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  \r\n  const openModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n  const openGoogleMaps = () => {\r\n    // Construct the Google Maps URL with the address as a query parameter\r\n     mapsUrl = `https://www.google.com/maps/search/?api=1&query=${address}`;\r\n\r\n    // Open a new window or tab with the Google Maps URL\r\n    window.open(mapsUrl, '_blank');\r\n  };\r\n  const initIndexedDB = async () => {\r\n    try {\r\n      const db = await openDB('brava-db', 1, {\r\n        upgrade(db) {\r\n          if (!db.objectStoreNames.contains('images')) {\r\n            const imagesStore = db.createObjectStore('images', { keyPath: 'key' });\r\n            imagesStore.createIndex('url', 'url', { unique: true });\r\n          }\r\n        },\r\n      });\r\n      return db;\r\n    } catch (error) {\r\n      console.error('Error initializing IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n \r\n\r\n  const saveImageToIndexedDB = async (imageBlob) => {\r\n    try {\r\n      const db = await initIndexedDB();\r\n      const tx = db.transaction('images', 'readwrite');\r\n      const store = tx.objectStore('images');\r\n  \r\n      // Use a unique key, such as the S3 key, assuming it's unique for each image\r\n      const key = 'profileImage';\r\n      \r\n      // Create an object with a URL (if needed) and the image data\r\n      const data = {\r\n        key,\r\n        url: profile_image_url,  // Add the URL if it's necessary for your use case\r\n        data: imageBlob,\r\n      };\r\n  \r\n      // Store the data in IndexedDB\r\n      store.put(data);\r\n  \r\n      // Complete the transaction\r\n      await tx.complete;\r\n      \r\n      console.log('Image stored in IndexedDB:', data);\r\n    } catch (error) {\r\n      console.error('Error storing image in IndexedDB:', error);\r\n    }\r\n  };\r\n\r\n  const loadImageFromIndexedDB = async () => {\r\n    try {\r\n      const db = await initIndexedDB();\r\n      const tx = db.transaction('images');\r\n      const store = tx.objectStore('images');\r\n      const entry = await store.get('profileImage');\r\n  \r\n      return entry ? entry.data : null;\r\n    } catch (error) {\r\n      console.error('Error loading from IndexedDB:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const fetchImage = async () => {\r\n    try {\r\n      const s3Client = new S3({\r\n        credentials: {\r\n          accessKeyId,\r\n          secretAccessKey,\r\n        },\r\n        region: Region,\r\n      });\r\n  \r\n      // Parse the profile_image_url to extract the S3 key\r\n      const urlObject = new URL(profile_image_url);\r\n      const key = decodeURIComponent(urlObject.pathname.replace(/^\\//, ''));\r\n  \r\n      const getObjectParams = {\r\n        Bucket,\r\n        Key: key,\r\n      };\r\n  \r\n      const command = new GetObjectCommand(getObjectParams);\r\n      const response = await s3Client.send(command);\r\n  \r\n     \r\n  \r\n      const blob = new Blob([response.Body], { type: response.ContentType });\r\n      saveImageToIndexedDB(blob);\r\n      // Save the image Blob directly to the state\r\n      setImage(blob);\r\n      setLoading(false);\r\n  \r\n      if (onLoad) {\r\n        onLoad();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching image:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const loadImageAndSetState = async () => {\r\n      const imageBuffer = await loadImageFromIndexedDB();\r\n\r\n      if (imageBuffer) {\r\n        const blob = new Blob([imageBuffer], { type: 'image/jpg' });\r\n        setImage(blob);\r\n        setLoading(false);\r\n      } else {\r\n        fetchImage();\r\n      }\r\n    };\r\n\r\n    loadImageAndSetState();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n\r\n      if (image) {\r\n        URL.revokeObjectURL(image);\r\n      }\r\n    };\r\n  }, [profile_image_url, Bucket, Region, accessKeyId, secretAccessKey, onLoad]);\r\n\r\n\r\n\r\n  const saveToContacts = async () => {\r\n    try {\r\n      const card = new vcf();\r\n      const imageBuffer = await loadImageFromIndexedDB();\r\n  \r\n      if (!imageBuffer) {\r\n        console.error('Image not found in IndexedDB.');\r\n        return;\r\n      }\r\n  \r\n      // Set basic properties\r\n  \r\n      // Manually encode special characters in the names\r\n      const removeDiacritics = (str) => unorm.nfkd(str).replace(/[\\u0300-\\u036f]/g, '');\r\n      const decodedUsername = removeDiacritics(decodeURIComponent(username));\r\n      const decodedTitle = removeDiacritics(decodeURIComponent(title));\r\n      const decodedNotes = removeDiacritics(decodeURIComponent(notes))\r\n      const decodedAddress = removeDiacritics(decodeURIComponent(address))\r\n      // Set structured name with properly encoded values\r\n      card.add('n', [decodedUsername]);\r\n  \r\n      // Set formatted name with the full, properly encoded name\r\n      card.add('fn', [decodedUsername]);\r\n  \r\n      card.add('org', company);\r\n      card.add('tel', phone);\r\n      card.add('email', email);\r\n  \r\n      // Set additional properties\r\n      card.add('title', [decodedTitle]);\r\n      card.add('url', `https://app.bravanfc.com/${id}/cards/${card_id}`);\r\n  \r\n      // Set social media properties\r\n      if (facebook) {\r\n        card.add('x-socialprofile', facebook, { type: 'Facebook' });\r\n      }\r\n      if (instagram) {\r\n        card.add('x-socialprofile', instagram, { type: 'Instagram' });\r\n      }\r\n      if (linkedin) {\r\n        card.add('x-socialprofile', linkedin, { type: 'Linkedin' });\r\n      }\r\n      if (youtube) {\r\n        card.add('x-socialprofile', youtube, { type: 'Youtube' });\r\n      }\r\n      if(notes) {\r\n        card.add('note', [decodedNotes])\r\n      }\r\n  \r\n  \r\n      // Set address\r\n      card.add('adr', [decodedAddress]);\r\n\r\n      // Extract the S3 key from the profile_image_url\r\n      const urlObject = new URL(profile_image_url);\r\n      const imageKey = decodeURIComponent(urlObject.pathname.replace(/^\\//, ''));\r\n  \r\n      // Generate a pre-signed URL for the image\r\n      const imageURL = await generatePresignedURL(imageKey);\r\n  \r\n      const encodedImage = await fetchAndEncodeImage(imageURL);\r\n      if (!encodedImage) {\r\n        console.error('Error fetching and encoding image.');\r\n        return;\r\n      }\r\n  \r\n      // Set image in vCard\r\n      card.add('photo', encodedImage, { encoding: 'b', type: 'image/jpeg' });\r\n  \r\n      // Generate vCard data as a string\r\n      const vCardData = card.toString('3.0');\r\n      console.log(vCardData);\r\n  \r\n      // Create a Blob from the vCard data with explicit UTF-8 encoding\r\n      const vcard_blob = new Blob([new TextEncoder().encode(vCardData)], {\r\n        type: 'text/vcard;charset=utf-8',\r\n      });\r\n  \r\n      // Open a new URL to prompt the user to add the contact\r\n      const downloadLink = document.createElement('a');\r\n      downloadLink.href = URL.createObjectURL(vcard_blob);\r\n      downloadLink.download = 'contact.vcf';\r\n  \r\n      // Trigger a click event to simulate a download prompt\r\n       // Redirect the user to the vCard file\r\n    window.location.href = URL.createObjectURL(vcard_blob);\r\n\r\n    // Release the object URL\r\n    URL.revokeObjectURL(vcard_blob);\r\n    } catch (error) {\r\n      console.error('Error saving to contacts:', error);\r\n    }\r\n  };\r\n  \r\n  // Function to fetch and encode the image\r\n  const fetchAndEncodeImage = async (imageUrl) => {\r\n    try {\r\n      const response = await fetch(imageUrl);\r\n      const imageBlob = await response.blob();\r\n  \r\n      // Resize and compress the image with a lower quality\r\n      const resizedAndCompressedBase64 = await resizeAndCompressImage(imageBlob, {\r\n        maxWidth: 800,\r\n        maxHeight: 800,\r\n        quality: 0.9, // Adjust the quality as needed\r\n      });\r\n  \r\n      return resizedAndCompressedBase64;\r\n    } catch (error) {\r\n      console.error('Error fetching, resizing, and encoding image:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  const resizeAndCompressImage = async (blob, options) => {\r\n    try {\r\n      const image = new Image();\r\n      image.src = URL.createObjectURL(blob);\r\n  \r\n      await new Promise((resolve, reject) => {\r\n        image.onload = resolve;\r\n        image.onerror = reject;\r\n      });\r\n  \r\n      const { maxWidth, maxHeight, quality } = options;\r\n  \r\n      let width = image.width;\r\n      let height = image.height;\r\n  \r\n      if (width > height) {\r\n        if (width > maxWidth) {\r\n          height *= maxWidth / width;\r\n          width = maxWidth;\r\n        }\r\n      } else {\r\n        if (height > maxHeight) {\r\n          width *= maxHeight / height;\r\n          height = maxHeight;\r\n        }\r\n      }\r\n  \r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      const context = canvas.getContext('2d');\r\n  \r\n      // Draw the image on the canvas progressively\r\n      context.drawImage(image, 0, 0, width, height);\r\n  \r\n      // Convert the canvas content to a blob\r\n      const resizedBlob = await new Promise((resolve) => {\r\n        canvas.toBlob(resolve, 'image/jpeg', quality);\r\n      });\r\n  \r\n      // Convert the resized blob to base64\r\n      const resizedBlobBuffer = await new Response(resizedBlob).arrayBuffer();\r\n      const resizedBlobBase64 = btoa(\r\n        new Uint8Array(resizedBlobBuffer).reduce((data, byte) => data + String.fromCharCode(byte), '')\r\n      );\r\n  \r\n      return resizedBlobBase64;\r\n    } catch (error) {\r\n      console.error('Error resizing and compressing image:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  const generatePresignedURL = async (imageKey) => {\r\n    try {\r\n      const s3Client = new S3({\r\n        region: 'eu-west-2',\r\n        credentials: {\r\n          accessKeyId: accessKeyId,\r\n          secretAccessKey: secretAccessKey,\r\n        },\r\n      });\r\n  \r\n      const params = {\r\n        Bucket: 'brava-bucket',\r\n        Key: imageKey,\r\n        Expires: 900,\r\n      };\r\n  \r\n      const signedURL =  getSignedUrl(s3Client, new GetObjectCommand(params));\r\n      console.log(signedURL)\r\n      return signedURL;\r\n    } catch (error) {\r\n      console.error('Error generating pre-signed URL:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleGetInTouch = () => {\r\n    try {\r\n      // Instead of triggering a download, open the modal\r\n      openModal();\r\n    } catch (error) {\r\n      console.error('Error opening modal:', error);\r\n    }\r\n  };\r\n  return (\r\n    <div className={`card-component ${loading ? 'loading' : ''}`}>\r\n      <div className=\"card-background\" style={{ backgroundImage: `url(${background_image_url})` }}></div>\r\n      <div className=\"card-component-header\">\r\n        {loading ? (\r\n          <p>Loading...</p>\r\n        ) : (\r\n          <>\r\n            {profile_image_url && <img className=\"card-image\" rel='preload'  loading=\"lazy\" src={profile_image_url} alt=\"Profile\" />}\r\n          </>\r\n        )}\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <h3>{company}</h3>\r\n        <h5>{username}</h5>\r\n        <p>{title}</p>\r\n        <div className=\"card-buttons\">\r\n          <button onClick={saveToContacts}>Save</button>\r\n        <button className=\"fab\" onClick={handleGetInTouch}>\r\n          Get in touch\r\n        </button>\r\n        </div>\r\n        <div className=\"social-icons\">\r\n          {url && <a href={url}><img rel='preload' loading=\"lazy\" src={UrlLogo} alt=\"Url\" focusable /></a>}\r\n          {google_reviews && <a href={google_reviews}><img rel='preload' loading=\"lazy\" src={GoogleReviewsLogo} alt=\"Instagram\" focusable /></a>}\r\n          {instagram && <a href={instagram}><img rel='preload' loading=\"lazy\"src={InstagramLogo} alt=\"Instagram\" focusable /></a>}\r\n          {facebook && <a href={facebook}><img rel='preload' loading=\"lazy\"src={FacebookLogo} alt=\"Facebook\" focusable /></a>}\r\n          {linkedin && <a href={linkedin}><img rel='preload' loading=\"lazy\"src={LinkedInLogo} alt=\"LinkedIn\" focusable /></a>}\r\n          {youtube && <a href={youtube}><img rel='preload' loading=\"lazy\"src={YouTubeLogo} alt=\"YouTube\" focusable /></a>}\r\n          {notes && <a  href={notes}><img rel='preload' loading=\"lazy\"style={{marginBottom: \"10px\"}} src={NotesLogo} alt=\"Notes\" focusable /></a>}\r\n          {address && <a href={mapsUrl} onClick={openGoogleMaps}><img rel='preload' loading='lazy' src='https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Flogodownload.org%2Fwp-content%2Fuploads%2F2018%2F01%2Fgoogle-maps-logo-1-1.png&f=1&nofb=1&ipt=6cc06d8c8b7753c7e7b516527a7a10f88401e3b7507e03a665c71775bbc79b4f&ipo=images' alt='Maps' focusable/></a>}\r\n        </div>\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onClose={closeModal} />\r\n    </div>\r\n  );\r\n}\r\n\r\nCardComponent.propTypes = {\r\n  email: PropTypes.string.isRequired,\r\n  phone: PropTypes.string.isRequired,\r\n  company: PropTypes.string.isRequired,\r\n  profile_image_url: PropTypes.string,\r\n  onLoad: PropTypes.func,\r\n  card_id: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  facebook: PropTypes.string.isRequired,\r\n  linkedin: PropTypes.string.isRequired,\r\n  instagram: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CardComponent;\r\n"],"names":["_ref","isOpen","onClose","formData","setFormData","useState","name","company","email","message","id","userId","useParams","handleChange","e","value","target","prevData","_jsx","_Fragment","children","className","_jsxs","onClick","onSubmit","preventDefault","axios","post","concat","process","then","res","console","log","headers","status","alert","catch","err","response","htmlFor","type","placeholder","onChange","required","card_id","username","phone","title","profile_image_url","background_image_url","onLoad","facebook","linkedin","instagram","google_reviews","address","youtube","notes","url","image","setImage","loading","setLoading","isModalOpen","setIsModalOpen","accessKeyId","secretAccessKey","Region","Bucket","mapsUrl","useEffect","isMounted","async","imageBuffer","loadImageFromIndexedDB","blob","Blob","fetchImage","loadImageAndSetState","URL","revokeObjectURL","initIndexedDB","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","error","store","transaction","objectStore","entry","get","data","s3Client","S3","credentials","region","urlObject","key","decodeURIComponent","pathname","replace","getObjectParams","Key","command","GetObjectCommand","send","Body","ContentType","tx","imageBlob","put","complete","saveImageToIndexedDB","fetchAndEncodeImage","fetch","imageUrl","resizeAndCompressImage","maxWidth","maxHeight","quality","options","Image","src","createObjectURL","Promise","resolve","reject","onload","onerror","width","height","canvas","document","createElement","getContext","drawImage","resizedBlob","toBlob","resizedBlobBuffer","Response","arrayBuffer","btoa","Uint8Array","reduce","byte","String","fromCharCode","generatePresignedURL","params","imageKey","Expires","signedURL","getSignedUrl","style","backgroundImage","rel","alt","card","vcf","removeDiacritics","str","unorm","decodedUsername","decodedTitle","decodedNotes","decodedAddress","add","imageURL","encodedImage","encoding","vCardData","toString","vcard_blob","TextEncoder","encode","downloadLink","href","download","window","location","handleGetInTouch","UrlLogo","focusable","GoogleReviewsLogo","InstagramLogo","FacebookLogo","LinkedInLogo","YouTubeLogo","marginBottom","openGoogleMaps","open","Modal","closeModal"],"sourceRoot":""}