{"version":3,"file":"static/js/69.7978dc8e.chunk.js","mappings":"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","sources":["pages/Dashboard/Account/Account.js","pages/Dashboard/Overview/Components/ContactComponent.js","pages/Dashboard/Overview/Components/Leads/Leads.js","pages/Dashboard/Overview/Components/Graph/Graph.js","pages/Dashboard/Components/EditCard/EditCard.js","pages/Dashboard/Overview/Components/PieChart/PieChart.js","pages/Dashboard/Overview/Components/LastContactsComponent/LastContactsComponent.js","pages/Dashboard/Analytics/Analytics.js","pages/Dashboard/Components/SideNavigation/SideNavigation.js","pages/Dashboard/Overview/Overview.js","pages/Dashboard/dashboard.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Header from '../Components/Header';\r\nimport Cookie from 'js-cookie';\r\nimport './Account.scss'\r\n\r\nfunction Account() {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogout = () => {\r\n    // Clear authentication state (e.g., tokens, user information)\r\n    // Perform API or server logout (if needed)\r\n\r\n    // For example, if using localStorage for authentication tokens:\r\n    Cookie.remove('session_token');\r\n    localStorage.removeItem('profile_image_url');\r\n    localStorage.removeItem('username');\r\n    // Redirect to the login page\r\n    navigate('/login');\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if the session_token cookie exists\r\n    const sessionToken = Cookie.get('session_token');\r\n\r\n    if (!sessionToken) {\r\n      // Redirect to the login page if the cookie does not exist\r\n      navigate('/login');\r\n    }\r\n  }, [navigate]);\r\n\r\n  return (\r\n    <div className='account-container'>\r\n      <Header />\r\n      <button onClick={handleLogout}>Logout</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Account;\r\n","import React, { useState } from 'react';\r\nimport './ContactComponent.scss';\r\n\r\nfunction ContactComponent({ user_id, contact_id, name, company, email, message, contact_date, phone, sector }) {\r\n  const isMobile = window.innerWidth <= 1000;\r\n  const formattedDate = new Date(contact_date).toLocaleDateString();\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const toggleModal = () => {\r\n    setIsModalOpen(!isModalOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"contacts\">\r\n      <div className=\"contact\">\r\n        <dl className=\"contact-details\">\r\n          <div>\r\n            <dt>{name}, {company}</dt>\r\n          </div>\r\n          <div>\r\n            <dd style={{marginRight:\"80px\"}}>{email}</dd>\r\n          </div>\r\n          <div>\r\n            <dd>{phone}</dd>\r\n          </div>\r\n          <div>\r\n            <dd>{sector}</dd>\r\n          </div>\r\n          {!isMobile && (\r\n            <div>\r\n              <dd style={{marginLeft:'-10px'}}>{formattedDate}</dd>\r\n            </div>\r\n          )}\r\n          <div className={`contact-message ${isMobile ? 'full-width-message' : ''}`}>\r\n            <dt>\r\n                <button onClick={toggleModal}>Read Message</button>\r\n            </dt>\r\n          </div>\r\n        </dl>\r\n      </div>\r\n      {isModalOpen && (\r\n      <div className=\"lead-modal\">\r\n      <div className=\"lead-modal-content\">\r\n        <span className=\"close\" onClick={toggleModal}>&times;</span>\r\n        <h2 className='lead-modal-name'>Message</h2>\r\n        <p>{message}</p>\r\n        <div className=\"modal-buttons\">\r\n          {phone && (\r\n            <button onClick={() => window.location.href = `tel:${phone}`}>Call {name}</button>\r\n          )}\r\n          {email && (\r\n            <button onClick={() => window.location.href = `mailto:${email}`}>Email {email}</button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactComponent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Leads.scss';\r\nimport '../../Overview.scss';\r\nimport ContactComponent from '../ContactComponent';\r\nimport { saveAs } from 'file-saver';\r\nimport axios from 'axios';\r\n\r\nconst Leads = ({ userId, leadsData }) => {\r\n  const [contactData, setContactData] = useState(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [filterOption, setFilterOption] = useState('mostRecent');\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const contactsPerPage = 7;\r\n  const isMobile = window.innerWidth <= 1000;\r\n\r\n  useEffect(() => {\r\n    const fetchContactData = async () => {\r\n      try {\r\n        const response = await axios.get(`https://${process.env.REACT_APP_HOST}/api/${userId}/contacts`);\r\n        setContactData(response.data.contacts); // Update to set only the contacts array\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.log('Error fetching contact data:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchContactData();\r\n  }, [userId]);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  // Ensure contactData is an array before filtering\r\n  const filteredContacts = Array.isArray(contactData) ? contactData.filter(contact => {\r\n    return (\r\n      contact.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      contact.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      contact.company.toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n  }).sort((a, b) => {\r\n    if (filterOption === 'mostRecent') {\r\n      return new Date(b.contact_date) - new Date(a.contact_date);\r\n    } else {\r\n      return new Date(a.contact_date) - new Date(b.contact_date);\r\n    }\r\n  }) : [];\r\n\r\n  const indexOfLastContact = currentPage * contactsPerPage;\r\n  const indexOfFirstContact = indexOfLastContact - contactsPerPage;\r\n  const currentContacts = filteredContacts.slice(indexOfFirstContact, indexOfLastContact);\r\n  const contactCounter = currentContacts.length;\r\n\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  const downloadCSV = () => {\r\n    if (contactData && contactData.length > 0) {\r\n      const header = ['Name', 'Email', 'Company', 'Contact Date', 'Message'];\r\n      const csvData = [header.join(',')];\r\n\r\n      contactData.forEach(contact => {\r\n        const row = [\r\n          contact.name,\r\n          contact.email,\r\n          contact.company,\r\n          contact.sector,\r\n          contact.phone,\r\n          contact.contact_date,\r\n          contact.message\r\n        ];\r\n        csvData.push(row.join(','));\r\n      });\r\n\r\n      const csvContent = csvData.join('\\n');\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });\r\n      saveAs(blob, 'leads.csv');\r\n    }\r\n  };\r\n\r\n  const pagination = (\r\n    <div className=\"pagination-container\">\r\n      <ul className=\"pagination\">\r\n        {Array.from({ length: Math.max(1, Math.ceil(filteredContacts.length / contactsPerPage)) }, (_, i) => (\r\n          <li\r\n            key={i}\r\n            className={currentPage === i + 1 ? 'active' : ''}\r\n            onClick={() => paginate(i + 1)}\r\n          >\r\n            {i + 1}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n      <div className='lead-container'>\r\n        <div className=\"lead-header\">\r\n          <h1 className='lead-title'>Card generated Leads</h1>\r\n        </div>\r\n        <div className=\"lead-wrapper\">\r\n          {/* Filter container */}\r\n          <div className=\"filter-container\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search...\"\r\n              value={searchQuery}\r\n              onChange={e => setSearchQuery(e.target.value)}\r\n              style={{ width: '100%' }} // Set the input width\r\n            />\r\n            <select\r\n              value={filterOption}\r\n              onChange={e => setFilterOption(e.target.value)}\r\n              style={{ height: '40px' }} // Set the dropdown height\r\n            >\r\n              <option value=\"mostRecent\">Most Recent</option>\r\n              <option value=\"oldest\">Oldest</option>\r\n            </select>\r\n          </div>\r\n          {/* Contact description */}\r\n          <div className=\"contact-description\">\r\n            <h1>Name, Company</h1>\r\n            <h1>Email</h1>\r\n            <h1 style={{marginLeft:\"40px\"}}>Phone</h1>\r\n            <h1>Sector</h1>\r\n            <h1>Contact Date</h1>\r\n            <h1>Message</h1>\r\n          </div>\r\n          {/* Display contacts */}\r\n          {loading ? (\r\n            <p>Loading...</p>\r\n          ) : (\r\n            currentContacts.length > 0 ? (\r\n              currentContacts.map(contact => (\r\n                <ContactComponent\r\n                  key={contact.contact_id} // Ensure the key is unique\r\n                  user_id={contact.user_id}\r\n                  contact_id={contact.contact_id}\r\n                  name={contact.name}\r\n                  company={contact.company}\r\n                  email={contact.email}\r\n                  sector={contact.sector}\r\n                  phone={contact.phone}\r\n                  message={contact.message}\r\n                  contact_date={contact.contact_date} // Ensure this prop is passed\r\n                />\r\n              ))\r\n            ) : (\r\n              <p>No results found.</p>\r\n            )\r\n          )}\r\n          {/* Export button */}\r\n          <button className=\"download-csv-button\" onClick={downloadCSV}>Export Leads</button>\r\n        </div>\r\n        {/* Pagination */}\r\n        {pagination}\r\n        {/* Sidebar */}\r\n        <div className=\"overview-body-sidebar\">\r\n          <section className=\"payment-section\">\r\n            {!isMobile && (\r\n              <div>\r\n                <h2>GENERATED LEADS: </h2>\r\n                <div className='contact-counter'>{contactData?.length ?? 0}</div>\r\n              </div>\r\n            )}\r\n            <div className=\"payment-section-header\"></div>\r\n          </section>\r\n        </div>\r\n        \r\n      </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default Leads;\r\n","import React, { useRef, useEffect, useState } from 'react';\r\nimport { VictoryChart, VictoryLine, VictoryAxis, VictoryLabel } from 'victory';\r\nimport './Graph.scss'; // Import the styles\r\n\r\nconst GraphComponent = ({ leadsData }) => {\r\n  const containerRef = useRef(null);\r\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\r\n\r\n  useEffect(() => {\r\n    const resizeObserver = new ResizeObserver((entries) => {\r\n      const entry = entries[0];\r\n      if (entry) {\r\n        const { width, height } = entry.contentRect;\r\n        setDimensions({ width, height });\r\n      }\r\n    });\r\n\r\n    resizeObserver.observe(containerRef.current);\r\n\r\n    return () => {\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  if (!leadsData || !Array.isArray(leadsData)) return null;\r\n\r\n  // Initialize contactsPerDay object\r\n  const contactsPerDay = {\r\n    Sun: 0, Mon: 0, Tue: 0, Wed: 0, Thu: 0, Fri: 0, Sat: 0\r\n  };\r\n\r\n  // Count leads for each day of the week\r\n  leadsData.forEach(lead => {\r\n    const dayOfWeek = new Date(lead.access_date).toLocaleDateString('en-US', { weekday: 'short' });\r\n    contactsPerDay[dayOfWeek] += 1;\r\n  });\r\n\r\n  // Define days of the week\r\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n  // Prepare data for Victory\r\n  const data = daysOfWeek.map(day => ({ x: day, y: contactsPerDay[day] }));\r\n\r\n  return (\r\n    <div ref={containerRef} className='graph-container'>\r\n      <VictoryChart width={dimensions.width} height={dimensions.height}>\r\n        <VictoryLabel text=\"Weekly Taps\" x={dimensions.width / 2} y={10} textAnchor=\"middle\" style={{ fill: '#fff', fontSize: 22, fontWeight: 'bold' }} />\r\n        <VictoryAxis\r\n          tickValues={daysOfWeek}\r\n          style={{\r\n            tickLabels: { fontSize: 16, fill: '#fff', fontWeight: 'bold' }, // Customize axis tick labels\r\n            axis: { stroke: '#fff' }, // Customize axis line\r\n          }}\r\n        />\r\n        <VictoryAxis\r\n          dependentAxis\r\n          style={{\r\n            tickLabels: { fontSize: 16, fill: '#fff', fontWeight: 'bold' }, // Customize axis tick labels\r\n            axis: { stroke: '#fff' }, // Customize axis line\r\n          }}\r\n        />\r\n        <VictoryLine\r\n          data={data}\r\n          style={{\r\n            data: { stroke: '#8824c2' }, // Customize line color\r\n            parent: { border: '1px solid #000' }\r\n          }}\r\n        />\r\n      </VictoryChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphComponent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router';\r\nimport axios from 'axios';\r\nimport Cookie from 'js-cookie';\r\nimport CreateCard from '../../CreateCard/CreateCard';\r\n\r\nconst EditCard = () => {\r\n  const { id: userId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [cardData, setCardData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchCardData = async () => {\r\n      try {\r\n        const sessionToken = Cookie.get('session_token');\r\n        if (!sessionToken) {\r\n          navigate('/login');\r\n          return;\r\n        }\r\n        const response = await axios.get(`https://${process.env.REACT_APP_HOST}/api/${userId}/dashboard/cards`); // Adjust the API endpoint\r\n        setCardData(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching card data:', error);\r\n      }\r\n    };\r\n\r\n    fetchCardData();\r\n  }, [userId, navigate]);\r\n\r\n  return (\r\n    <div>\r\n      {cardData && (\r\n        <CreateCard initialValues={cardData?.cards[0]} cardId={cardData.cards[0]?.card_id} isEditing={true} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router';\r\nimport { Chart } from 'react-google-charts';\r\nimport './PieChart.scss';\r\n\r\nconst PieChart = () => {\r\n  const { id: userId } = useParams();\r\n  const [pieData, setPieData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(`https://${process.env.REACT_APP_HOST}/api/${userId}/icon-engagement`);\r\n        const responseData = response.data;\r\n        const total = responseData?.top5Metrics.reduce((acc, curr) => acc + curr.count, 0);\r\n        const filteredMetrics = responseData?.top5Metrics?.filter(entry => entry.count > 0);\r\n        \r\n        if (filteredMetrics && total !== 0) { // Ensure filteredMetrics is defined\r\n          const formattedData = [\r\n            ['Metric', 'Count'],\r\n            ...filteredMetrics.map(entry => [mapMetricToLabel(entry.metric), entry.count])\r\n          ];\r\n          setPieData(formattedData);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, [userId]);\r\n\r\n  // Function to map metric names to user-friendly labels\r\n  const mapMetricToLabel = (metric) => {\r\n    switch (metric) {\r\n      case 'google_reviews_count':\r\n        return 'Google Reviews';\r\n      case 'instagram_count':\r\n        return 'Instagram';\r\n      case 'facebook_count':\r\n        return 'Facebook';\r\n      case 'linkedin_count':\r\n        return 'LinkedIn';\r\n      case 'youtube_count':\r\n        return 'YouTube';\r\n      case 'paypal_count':\r\n        return 'PayPal';\r\n      case 'twitter_count':\r\n        return 'Twitter';\r\n      case 'tiktok_count':\r\n        return 'TikTok';\r\n      case 'spotify_count':\r\n        return 'Spotify';\r\n      case 'vinted_count':\r\n        return 'Vinted';\r\n      case 'notes_count':\r\n        return 'Notes';\r\n      case 'address_count':\r\n        return 'Address';\r\n      case 'standvirtual_count':\r\n        return 'Standvirtual';\r\n      case 'olx_count':\r\n        return 'OLX';\r\n      case 'piscapisca_count':\r\n        return 'Piscapisca';\r\n      case 'custojusto_count':\r\n        return 'Custo Justo';\r\n      case 'url_count':\r\n        return 'URL';\r\n      default:\r\n        return metric;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"pie-chart-container\">\r\n      <h2>Social Media Engagement</h2>\r\n      <div className=\"pie-chart\">\r\n        {pieData && pieData.length > 0 ? (\r\n          <Chart\r\n            width={'100%'}\r\n            height={'100%'}\r\n            chartType=\"PieChart\"\r\n            data={pieData}\r\n            \r\n            options={{\r\n              pieSliceText:'none',\r\n              pieHole: 0.5,\r\n              sliceVisibilityThreshold: 0.01, // 1%\r\n              legend: {\r\n                textStyle: {\r\n                  color: '#fff', // Change legend text color\r\n                  fontSize: 16,\r\n                },\r\n              },\r\n              backgroundColor: '#1b1b1c',\r\n              pieSliceBorderColor: 'none',\r\n              colors: ['#613FB8', '#361BA0', '#8B63D0', '#B688E7', '#E0ACFF'],\r\n              chartArea: {\r\n                width: '100%',\r\n                height: '100%',\r\n                top: 0,\r\n                left: 0,\r\n              },\r\n            }}\r\n          />\r\n        ) : (\r\n          <p>No data available</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PieChart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './LastContactsComponent.scss';\r\nimport ContactComponent from '../../Components/ContactComponent'; // Import the ContactComponent\r\n\r\nconst PAGE_SIZE = 5; // Number of contacts per page\r\nconst ROW_HEIGHT = 50; // Approximate height of each row in pixels\r\n\r\nconst LastContactsComponent = ({ contacts, count }) => {\r\n  // Ensure contacts is an array, if not, default to an empty array\r\n  const contactsArray = Array.isArray(contacts) ? contacts : [];\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [selectedMessage, setSelectedMessage] = useState(null); // Track the selected message for the modal\r\n\r\n  useEffect(() => {\r\n    // Calculate the total number of pages\r\n    const total = Math.ceil(count / PAGE_SIZE);\r\n    setTotalPages(total);\r\n  }, [count]);\r\n\r\n  // Get contacts for the current page\r\n  const startIndex = (currentPage - 1) * PAGE_SIZE;\r\n  const endIndex = startIndex + PAGE_SIZE;\r\n  const currentContacts = contactsArray.slice(startIndex, endIndex);\r\n\r\n  // Calculate the height of the table\r\n  const tableHeight = Math.max(PAGE_SIZE, currentContacts.length) * ROW_HEIGHT;\r\n\r\n  const handleNextPage = () => {\r\n    setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages));\r\n  };\r\n\r\n  const handlePrevPage = () => {\r\n    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));\r\n  };\r\n\r\n  // Function to handle selecting a message and opening the modal\r\n  const handleSelectMessage = (message) => {\r\n    setSelectedMessage(message);\r\n  };\r\n\r\n  // Function to close the modal\r\n  const closeModal = () => {\r\n    setSelectedMessage(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"last-contacts-component\">\r\n      <div className=\"table-container\" style={{ height: tableHeight }}>\r\n        <h1>Recent Leads</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Company</th>\r\n              <th>Email</th>\r\n              <th>Phone</th>\r\n              <th>Contact Date</th>\r\n              <th>Sector</th>\r\n              <th>Message</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {currentContacts.map((contact, index) => (\r\n              <tr key={index}>\r\n                <td>{contact.name || '-'}</td>\r\n                <td>{contact.company || '-'}</td>\r\n                <td>{contact.email || '-'}</td>\r\n                <td>{contact.phone || '-'}</td>\r\n                <td>{contact.contact_date}</td>\r\n                <td>{contact.sector || '-'}</td>\r\n                {/* Render the ContactComponent for each contact */}\r\n                <td>{contact.message || '-'}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div className=\"pagination\">\r\n        {/* Pagination controls go here */}\r\n      </div>\r\n      {/* Render the modal HTML structure conditionally */}\r\n   \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LastContactsComponent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Slider from 'react-slick';\r\nimport 'slick-carousel/slick/slick.css';\r\nimport 'slick-carousel/slick/slick-theme.css';\r\nimport PieChart from '../Overview/Components/PieChart/PieChart';\r\nimport \"./Analytics.scss\";\r\nimport LastContactsComponent from '../Overview/Components/LastContactsComponent/LastContactsComponent';\r\nimport GraphComponent from '../Overview/Components/Graph/Graph';\r\n\r\nfunction Analytics({ leadsData, contacts, username }) {\r\n  const defaultLeadsData = leadsData || [];\r\n  const defaultContacts = contacts || [];\r\n  const [city, setCity] = useState('');\r\n  const ratio = ((defaultLeadsData.length / defaultContacts.length) * 100).toFixed(1) || 0;\r\n\r\n  useEffect(() => {\r\n    if (!leadsData || !Array.isArray(leadsData)) return;\r\n\r\n    const cities = leadsData.map(lead => lead.city);\r\n    const cityCounts = {};\r\n    cities.forEach(city => {\r\n      cityCounts[city] = (cityCounts[city] || 0) + 1;\r\n    });\r\n\r\n    const sortedCities = Object.keys(cityCounts).sort((a, b) => cityCounts[b] - cityCounts[a]);\r\n    const mostDominant = sortedCities[0];\r\n    setCity(mostDominant);\r\n  }, [leadsData]);\r\n\r\n  const sliderSettings = {\r\n    dots: true,\r\n    arrows: false,\r\n    infinite: false,\r\n    speed: 200,\r\n    slidesToShow: 2,\r\n    slidesToScroll: 1,\r\n    swipeToSlide: true,\r\n    responsive: [\r\n      {\r\n        breakpoint: 768,\r\n        settings: {\r\n          slidesToShow: 1,\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div className='analytics-container'>\r\n      <div className=\"analytics-section\">\r\n        {window.innerWidth <= 768 ? (\r\n          <Slider {...sliderSettings}>\r\n            <div className=\"analytics-rectangle\">\r\n              <div>\r\n                <h1>{defaultContacts.length}</h1>\r\n                <p>Lead Count</p>\r\n              </div>\r\n              <hr className=\"divider\" />\r\n              <div>\r\n                <h1>{defaultLeadsData.length}</h1>\r\n                <p>Total Tap Count</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"analytics-rectangle\">\r\n              <div>\r\n                <h1>{ratio}%</h1>\r\n                <p>Tap-Lead ratio</p>\r\n              </div>\r\n              <hr className=\"divider\" />\r\n              <div>\r\n                <h1>{city}</h1>\r\n                <p>Dominant City</p>\r\n              </div>\r\n            </div>\r\n          </Slider>\r\n        ) : (\r\n          <div className=\"analytics-rectangle\">\r\n            <div>\r\n              <h1>{defaultContacts.length}</h1>\r\n              <p>Lead Count</p>\r\n            </div>\r\n            <hr className=\"divider\" />\r\n            <div>\r\n              <h1>{defaultLeadsData.length}</h1>\r\n              <p>Total Tap Count</p>\r\n            </div>\r\n            <hr className=\"divider\" />\r\n            <div>\r\n              <h1>{ratio}%</h1>\r\n              <p>Tap-Lead ratio</p>\r\n            </div>\r\n            <hr className=\"divider\" />\r\n            <div>\r\n              <h1>{city}</h1>\r\n              <p>Dominant City</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"graph-section\">\r\n        <GraphComponent leadsData={defaultLeadsData} />\r\n        <PieChart />\r\n      </div>\r\n      <div className=\"analytics-section\">\r\n        <LastContactsComponent\r\n          title=\"Last 5 Contacts\"\r\n          count={defaultContacts.length}\r\n          contacts={defaultContacts}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Analytics;\r\n","import React, { useState } from 'react';\r\nimport './SideNavigation.scss';\r\n\r\nconst SideNavigation = ({ handleTabClick }) => {\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  \r\n  const toggleDropdown = () => {\r\n    setShowDropdown(!showDropdown);\r\n  };\r\n\r\n  const toggleMenu = () => {\r\n    setShowMenu(!showMenu);\r\n  };\r\n\r\n  const handleNavItemClick = (tab) => {\r\n    handleTabClick(tab); // Call the handleTabClick function with the selected tab\r\n    setShowMenu(false); // Close the mobile menu after a navigation item is clicked\r\n  };\r\n\r\n  return (\r\n    <div className=\"overview-body-navigation\">\r\n      {/* Mobile Menu Button */}\r\n      <div className=\"mobile-menu-button\" onClick={toggleMenu}>\r\n        <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-menu.svg?v=1714064137\" alt=\"Menu\" className=\"menu-icon\" />\r\n      </div>\r\n      \r\n      <nav className={`side-navigation ${showMenu ? 'show' : ''}`}>\r\n      <div className=\"dashboard-header-logo\">\r\n            <div className=\"dashboard-logo\">\r\n              <span className=\"dashboard-logo-icon\">\r\n                <img src=\"https://res.cloudinary.com/dnho57ne8/image/upload/v1699913993/brava_fqk4h4.png\" alt=\"Logo\" />\r\n              </span>\r\n            </div>\r\n          </div>\r\n        <a onClick={() => handleNavItemClick('overview')} href=\"#\" className=\"nav-link\">\r\n          <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/dashboard.svg?v=1713982497\" alt=\"Dashboard\" className=\"nav-icon\" />\r\n          <span>Dashboard</span>\r\n        </a>\r\n        <div className=\"dropdown-wrapper\">\r\n          <div className=\"dropdown-header\" onClick={toggleDropdown}>\r\n            <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/account-balance-wallet.svg?v=1713982779\" alt=\"Cards\" className=\"nav-icon\" />\r\n            <span>Cards</span>\r\n          </div>\r\n          {showDropdown && (\r\n            <ul className=\"dropdown-content\">\r\n              <li onClick={() => handleNavItemClick('my-card')}>My Card</li>\r\n              <li onClick={() => handleNavItemClick('edit-card')}>Edit Card</li>\r\n            </ul>\r\n          )}\r\n        </div>\r\n        <a onClick={() => handleNavItemClick('leads')} href=\"#\" className=\"nav-link\">\r\n          <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/mail.svg?v=1713983246\" alt=\"Leads\" className=\"nav-icon\" />\r\n          <span>Leads</span>\r\n        </a>\r\n        <a href=\"#\" className=\"nav-link\">\r\n          <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/calendar-today.svg?v=1713983141\" alt=\"Calendar\" className=\"nav-icon\" />\r\n          <span>Calendar</span>\r\n        </a>\r\n        <a onClick={() => handleNavItemClick('account')} href=\"#\" className=\"nav-link\">\r\n          <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/settings.svg?v=1713983432\" alt=\"Settings\" className=\"nav-icon\" />\r\n          <span>Settings</span>\r\n        </a>\r\n        <a href=\"https://bravanfc.com\" target=\"_blank\" className=\"nav-link\">\r\n          <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/local-grocery-store.svg?v=1713983431\" alt=\"Store\" className=\"nav-icon\" />\r\n          <span>Store</span>\r\n        </a>\r\n        <a href=\"#\" className=\"nav-link\">\r\n          <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/logout.svg?v=1713983567\" alt=\"Logout\" className=\"nav-icon\" />\r\n          <span>Logout</span>\r\n        </a>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideNavigation;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router';\r\nimport \"./Overview.scss\"\r\nimport Leads from './Components/Leads/Leads';\r\nimport Card from '../Cards/Cards'\r\nimport GraphComponent from './Components/Graph/Graph';\r\nimport EditCard from '../Components/EditCard/EditCard';\r\nimport Analytics from '../Analytics/Analytics';\r\n\r\nimport Cookie from 'js-cookie';\r\nimport SideNavigation from '../Components/SideNavigation/SideNavigation';\r\nimport Account from '../Account/Account'\r\n\r\nconst OverviewContent = ({ contactData, userId, leadsData, username }) => {\r\n  const navigate = useNavigate();\r\n  const { tab } = useParams();\r\n  const [isMenuOpen, setMenuOpen] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [selectedTab, setSelectedTab] = useState(tab || 'overview');\r\n\r\n  const contactsPerPage = 5;\r\n\r\n  // Calculate indexes of contacts to display on the current page\r\n  const indexOfLastContact = currentPage * contactsPerPage;\r\n  var currentContacts = '';\r\n  if (Array.isArray(contactData) && contactData.length > 0) {\r\n    // Calculate indexes of contacts to display on the current page\r\n    const indexOfLastContact = currentPage * contactsPerPage;\r\n    const indexOfFirstContact = indexOfLastContact - contactsPerPage;\r\n    \r\n    // Slice the contactData array to get the contacts for the current page\r\n    currentContacts = contactData.slice(indexOfFirstContact, indexOfLastContact);\r\n  }\r\n\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n\r\n  const handleTabClick = (tab) => {\r\n    navigate(`/${userId}/dashboard/${tab}`);\r\n    setSelectedTab(tab)\r\n    setMenuOpen(false);\r\n  };\r\n\r\n  const handleMenuClick = () => {\r\n    setMenuOpen(!isMenuOpen);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const sessionToken = Cookie.get('session_token');\r\n    if (!sessionToken) {\r\n      navigate('/login');\r\n    }\r\n  }, [navigate]);\r\n\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  const toggleDropdown = () => {\r\n    setShowDropdown(!showDropdown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"overview\">\r\n        <SideNavigation handleTabClick={handleTabClick} /> \r\n        <div className=\"overview-body-main-content\">\r\n          {selectedTab === 'overview' && <Analytics leadsData={leadsData} username={username} contacts={contactData}/> }\r\n          {selectedTab === 'my-card' && <Card />}\r\n          {selectedTab === 'edit-card' && <EditCard />}\r\n          {selectedTab === 'leads' && <Leads leadsData={leadsData}  userId={userId}/>}\r\n          {selectedTab === 'account' && <Account />}\r\n          {/* Add more conditions for other tabs */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OverviewContent;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport './dashboard.scss';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Header from './Components/Header';\r\nimport OverviewContent from './Overview/Overview';\r\nimport Cards from './Cards/Cards';\r\nimport Cookie from 'js-cookie';\r\nimport GraphComponent from './Overview/Components/Graph/Graph';\r\n\r\nexport function Dashboard() {\r\n  const { id: userId, tab } = useParams();\r\n  const navigate = useNavigate();\r\n  const [userData, setUserData] = useState(null);\r\n  const [leadsData, setLeadsData] = useState(null);\r\n  const [contactData, setContactData] = useState(null)\r\n  const isDataFetched = useRef(false);\r\n\r\n  useEffect(() => {\r\n\r\n    // Check if userId exists before making the API call\r\n    if (!userId) return;\r\n\r\n    // Check if data is being fetched to avoid redundant API calls\r\n    if (isDataFetched.current) {\r\n      return;\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const sessionToken = Cookie.get('session_token');\r\n        if (!sessionToken) {\r\n          navigate('/login');\r\n          return;\r\n        }\r\n    \r\n        const response = await axios.get(`https://${process.env.REACT_APP_HOST}/api/${userId}/dashboard`, { withCredentials: true });\r\n    \r\n        // Extract username and profile_image_url from the response data object\r\n        const { username, profile_image_url } = response.data.userData;\r\n    \r\n        // Set userData state with extracted data\r\n        setUserData({ username, profile_image_url });\r\n    \r\n        // Set leadsData state with extracted data\r\n        setLeadsData(response.data.leadsData);\r\n        setContactData(response.data.contactsData)\r\n        \r\n        // Store username and profile image URL in localStorage\r\n        localStorage.setItem('profile_image_url', profile_image_url);\r\n        localStorage.setItem('username', username);\r\n    \r\n        // Update the ref to indicate that data has been fetched\r\n        isDataFetched.current = true;\r\n      } catch (error) {\r\n        console.log('Error fetching data:', error);\r\n      }\r\n    };\r\n    // Fetch data only if userId exists and data is not being fetched\r\n    fetchData();\r\n  }, [userId, navigate]);\r\n \r\n  \r\n  return (\r\n    <div>\r\n      {/* Render the Header component with default values if userData is null */}\r\n      <Header header_username={userData ? userData.username : 'Loading...'} profile_picture={userData ? userData.profile_image_url : 'default_profile_picture_url'} />\r\n      <div className=\"dashboard-body\">\r\n        {/* Pass the selected tab to the OverviewContent component */}\r\n        <OverviewContent selectedTab={tab}  contactData={contactData} username={userData?.username} userId={userId} leadsData={leadsData}/>\r\n        {/* Render Cards component */}\r\n        {tab === 'cards' && <Cards contactData={userData} />}\r\n        {/* Add other tab content here */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"names":["navigate","useNavigate","useEffect","Cookie","get","_jsxs","className","children","_jsx","Header","onClick","handleLogout","remove","localStorage","removeItem","_ref","user_id","contact_id","name","company","email","message","contact_date","phone","sector","isMobile","window","innerWidth","formattedDate","Date","toLocaleDateString","isModalOpen","setIsModalOpen","useState","toggleModal","style","marginRight","marginLeft","concat","location","href","_contactData$length","userId","leadsData","contactData","setContactData","searchQuery","setSearchQuery","filterOption","setFilterOption","currentPage","setCurrentPage","loading","setLoading","async","response","axios","process","data","contacts","error","console","log","fetchContactData","filteredContacts","Array","isArray","filter","contact","toLowerCase","includes","sort","a","b","indexOfLastContact","indexOfFirstContact","currentContacts","slice","pagination","length","from","Math","max","ceil","_","i","type","placeholder","value","onChange","e","target","width","height","map","ContactComponent","downloadCSV","csvData","join","forEach","row","push","csvContent","blob","Blob","saveAs","containerRef","useRef","dimensions","setDimensions","resizeObserver","ResizeObserver","entries","entry","contentRect","observe","current","disconnect","contactsPerDay","Sun","Mon","Tue","Wed","Thu","Fri","Sat","lead","dayOfWeek","access_date","weekday","daysOfWeek","day","x","y","ref","VictoryChart","VictoryLabel","text","textAnchor","fill","fontSize","fontWeight","VictoryAxis","tickValues","tickLabels","axis","stroke","dependentAxis","VictoryLine","parent","border","EditCard","_cardData$cards$","id","useParams","cardData","setCardData","fetchCardData","CreateCard","initialValues","cards","cardId","card_id","isEditing","PieChart","pieData","setPieData","_responseData$top5Met","responseData","total","top5Metrics","reduce","acc","curr","count","filteredMetrics","formattedData","mapMetricToLabel","metric","fetchData","Chart","chartType","options","pieSliceText","pieHole","sliceVisibilityThreshold","legend","textStyle","color","backgroundColor","pieSliceBorderColor","colors","chartArea","top","left","contactsArray","totalPages","setTotalPages","selectedMessage","setSelectedMessage","startIndex","endIndex","tableHeight","index","username","defaultLeadsData","defaultContacts","city","setCity","ratio","toFixed","cities","cityCounts","mostDominant","Object","keys","Slider","dots","arrows","infinite","speed","slidesToShow","slidesToScroll","swipeToSlide","responsive","breakpoint","settings","GraphComponent","LastContactsComponent","title","handleTabClick","showDropdown","setShowDropdown","showMenu","setShowMenu","handleNavItemClick","tab","toggleMenu","src","alt","toggleDropdown","isMenuOpen","setMenuOpen","selectedTab","setSelectedTab","SideNavigation","Analytics","Card","Leads","Account","Dashboard","userData","setUserData","setLeadsData","isDataFetched","withCredentials","profile_image_url","contactsData","setItem","header_username","profile_picture","OverviewContent","Cards"],"sourceRoot":""}