{"version":3,"file":"static/js/300.d5317c9b.chunk.js","mappings":"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","sources":["pages/Dashboard/Account/Account.js","pages/Dashboard/Overview/Components/Graph/Graph.js","pages/Dashboard/Overview/Components/ContactComponent.js","pages/Dashboard/Overview/Components/Leads/Leads.js","pages/Dashboard/Components/EditCard/EditCard.js","pages/Dashboard/Overview/Components/LastContactsComponent/LastContactsComponent.js","pages/Dashboard/Analytics/Analytics.js","pages/Dashboard/Components/SideNavigation/SideNavigation.js","pages/Dashboard/Overview/Overview.js","pages/Dashboard/dashboard.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Header from '../Components/Header';\r\nimport Cookie from 'js-cookie';\r\nimport './Account.scss'\r\n\r\nfunction Account() {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogout = () => {\r\n    // Clear authentication state (e.g., tokens, user information)\r\n    // Perform API or server logout (if needed)\r\n\r\n    // For example, if using localStorage for authentication tokens:\r\n    Cookie.remove('session_token');\r\n    localStorage.removeItem('profile_image_url');\r\n    localStorage.removeItem('username');\r\n    // Redirect to the login page\r\n    navigate('/login');\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if the session_token cookie exists\r\n    const sessionToken = Cookie.get('session_token');\r\n\r\n    if (!sessionToken) {\r\n      // Redirect to the login page if the cookie does not exist\r\n      navigate('/login');\r\n    }\r\n  }, [navigate]);\r\n\r\n  return (\r\n    <div className='account-container'>\r\n      <Header />\r\n      <button onClick={handleLogout}>Logout</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Account;\r\n","import React, { useRef, useEffect, useState } from 'react';\r\nimport { VictoryChart, VictoryLine, VictoryAxis, VictoryLabel } from 'victory';\r\nimport './Graph.scss'; // Import the styles\r\n\r\nconst GraphComponent = ({ leadsData }) => {\r\n  const containerRef = useRef(null);\r\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\r\n\r\n  useEffect(() => {\r\n    const resizeObserver = new ResizeObserver((entries) => {\r\n      const entry = entries[0];\r\n      if (entry) {\r\n        const { width, height } = entry.contentRect;\r\n        setDimensions({ width, height });\r\n      }\r\n    });\r\n\r\n    resizeObserver.observe(containerRef.current);\r\n\r\n    return () => {\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  if (!leadsData || !Array.isArray(leadsData)) return null;\r\n\r\n  // Initialize contactsPerDay object\r\n  const contactsPerDay = {\r\n    Sun: 0, Mon: 0, Tue: 0, Wed: 0, Thu: 0, Fri: 0, Sat: 0\r\n  };\r\n\r\n  // Count leads for each day of the week\r\n  leadsData.forEach(lead => {\r\n    const dayOfWeek = new Date(lead.access_date).toLocaleDateString('en-US', { weekday: 'short' });\r\n    contactsPerDay[dayOfWeek] += 1;\r\n  });\r\n\r\n  // Define days of the week\r\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n  // Prepare data for Victory\r\n  const data = daysOfWeek.map(day => ({ x: day, y: contactsPerDay[day] }));\r\n\r\n  return (\r\n    <div ref={containerRef} className='graph-container'>\r\n      <VictoryChart width={dimensions.width} height={dimensions.height}>\r\n      <VictoryLabel text=\"Weekly Leads\" x={100} y={10} textAnchor=\"middle\" style={{ fill: '#fff', fontSize: 20 }} />\r\n        <VictoryAxis\r\n          tickValues={daysOfWeek}\r\n          style={{\r\n            tickLabels: { fontSize: 16, fill: '#fff' }, // Customize axis tick labels\r\n            axis: { stroke: '#fff' }, // Customize axis line\r\n          }}\r\n        />\r\n        <VictoryAxis\r\n          dependentAxis\r\n          style={{\r\n            tickLabels: { fontSize: 16, fill: '#fff' }, // Customize axis tick labels\r\n            axis: { stroke: '#fff' }, // Customize axis line\r\n          }}\r\n        />\r\n        <VictoryLine\r\n          data={data}\r\n          style={{\r\n            data: { stroke: '#8824c2' }, // Customize line color\r\n            parent: { border: '1px solid #000' }\r\n          }}\r\n        />\r\n      </VictoryChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphComponent;\r\n","import React, { useState } from 'react';\r\nimport './ContactComponent.scss';\r\n\r\nfunction ContactComponent({ user_id, contact_id, name, company, email, message, contact_date, phone, sector }) {\r\n  const isMobile = window.innerWidth <= 1000;\r\n  const formattedDate = new Date(contact_date).toLocaleDateString();\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n  const toggleModal = () => {\r\n    setIsModalOpen(!isModalOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"contacts\">\r\n      <div className=\"contact\">\r\n        <dl className=\"contact-details\">\r\n          <div>\r\n            <dt>{name}, {company}</dt>\r\n          </div>\r\n          <div>\r\n            <dd style={{marginRight:\"80px\"}}>{email}</dd>\r\n          </div>\r\n          <div>\r\n            <dd>{phone}</dd>\r\n          </div>\r\n          <div>\r\n            <dd>{sector}</dd>\r\n          </div>\r\n          {!isMobile && (\r\n            <div>\r\n              <dd style={{marginLeft:'-10px'}}>{formattedDate}</dd>\r\n            </div>\r\n          )}\r\n          <div className={`contact-message ${isMobile ? 'full-width-message' : ''}`}>\r\n            <dt>\r\n                <button onClick={toggleModal}>Read Message</button>\r\n            </dt>\r\n          </div>\r\n        </dl>\r\n      </div>\r\n      {isModalOpen && (\r\n      <div className=\"lead-modal\">\r\n      <div className=\"lead-modal-content\">\r\n        <span className=\"close\" onClick={toggleModal}>&times;</span>\r\n        <h2 className='lead-modal-name'>Message</h2>\r\n        <p>{message}</p>\r\n        <div className=\"modal-buttons\">\r\n          {phone && (\r\n            <button onClick={() => window.location.href = `tel:${phone}`}>Call {name}</button>\r\n          )}\r\n          {email && (\r\n            <button onClick={() => window.location.href = `mailto:${email}`}>Email {email}</button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactComponent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Leads.scss';\r\nimport '../../Overview.scss';\r\nimport GraphComponent from '../Graph/Graph';\r\nimport ContactComponent from '../ContactComponent';\r\nimport { saveAs } from 'file-saver';\r\nimport axios from 'axios';\r\n\r\nconst Leads = ({ userId, leadsData }) => {\r\n  const [contactData, setContactData] = useState(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [filterOption, setFilterOption] = useState('mostRecent');\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const contactsPerPage = 7;\r\n  const isMobile = window.innerWidth <= 1000;\r\n\r\n  useEffect(() => {\r\n    const fetchContactData = async () => {\r\n      try {\r\n        const response = await axios.get(`https://${process.env.REACT_APP_HOST}/api/${userId}/contacts`);\r\n        setContactData(response.data.contacts); // Update to set only the contacts array\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.log('Error fetching contact data:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchContactData();\r\n  }, [userId]);\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  // Ensure contactData is an array before filtering\r\n  const filteredContacts = Array.isArray(contactData) ? contactData.filter(contact => {\r\n    return (\r\n      contact.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      contact.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      contact.company.toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n  }).sort((a, b) => {\r\n    if (filterOption === 'mostRecent') {\r\n      return new Date(b.contact_date) - new Date(a.contact_date);\r\n    } else {\r\n      return new Date(a.contact_date) - new Date(b.contact_date);\r\n    }\r\n  }) : [];\r\n\r\n  const indexOfLastContact = currentPage * contactsPerPage;\r\n  const indexOfFirstContact = indexOfLastContact - contactsPerPage;\r\n  const currentContacts = filteredContacts.slice(indexOfFirstContact, indexOfLastContact);\r\n  const contactCounter = currentContacts.length;\r\n\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  const downloadCSV = () => {\r\n    if (contactData && contactData.length > 0) {\r\n      const header = ['Name', 'Email', 'Company', 'Contact Date', 'Message'];\r\n      const csvData = [header.join(',')];\r\n\r\n      contactData.forEach(contact => {\r\n        const row = [\r\n          contact.name,\r\n          contact.email,\r\n          contact.company,\r\n          contact.sector,\r\n          contact.phone,\r\n          contact.contact_date,\r\n          contact.message\r\n        ];\r\n        csvData.push(row.join(','));\r\n      });\r\n\r\n      const csvContent = csvData.join('\\n');\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });\r\n      saveAs(blob, 'leads.csv');\r\n    }\r\n  };\r\n\r\n  const pagination = (\r\n    <div className=\"pagination-container\">\r\n      <ul className=\"pagination\">\r\n        {Array.from({ length: Math.max(1, Math.ceil(filteredContacts.length / contactsPerPage)) }, (_, i) => (\r\n          <li\r\n            key={i}\r\n            className={currentPage === i + 1 ? 'active' : ''}\r\n            onClick={() => paginate(i + 1)}\r\n          >\r\n            {i + 1}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n      <div className='lead-container'>\r\n        <div className=\"lead-header\">\r\n          <h1 className='lead-title'>Card generated Leads</h1>\r\n        </div>\r\n        <div className=\"lead-wrapper\">\r\n          {/* Filter container */}\r\n          <div className=\"filter-container\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search...\"\r\n              value={searchQuery}\r\n              onChange={e => setSearchQuery(e.target.value)}\r\n              style={{ width: '100%' }} // Set the input width\r\n            />\r\n            <select\r\n              value={filterOption}\r\n              onChange={e => setFilterOption(e.target.value)}\r\n              style={{ height: '40px' }} // Set the dropdown height\r\n            >\r\n              <option value=\"mostRecent\">Most Recent</option>\r\n              <option value=\"oldest\">Oldest</option>\r\n            </select>\r\n          </div>\r\n          {/* Contact description */}\r\n          <div className=\"contact-description\">\r\n            <h1>Name, Company</h1>\r\n            <h1>Email</h1>\r\n            <h1 style={{marginLeft:\"40px\"}}>Phone</h1>\r\n            <h1>Sector</h1>\r\n            <h1>Contact Date</h1>\r\n            <h1>Message</h1>\r\n          </div>\r\n          {/* Display contacts */}\r\n          {loading ? (\r\n            <p>Loading...</p>\r\n          ) : (\r\n            currentContacts.length > 0 ? (\r\n              currentContacts.map(contact => (\r\n                <ContactComponent\r\n                  key={contact.contact_id} // Ensure the key is unique\r\n                  user_id={contact.user_id}\r\n                  contact_id={contact.contact_id}\r\n                  name={contact.name}\r\n                  company={contact.company}\r\n                  email={contact.email}\r\n                  sector={contact.sector}\r\n                  phone={contact.phone}\r\n                  message={contact.message}\r\n                  contact_date={contact.contact_date} // Ensure this prop is passed\r\n                />\r\n              ))\r\n            ) : (\r\n              <p>No results found.</p>\r\n            )\r\n          )}\r\n          {/* Export button */}\r\n          <button className=\"download-csv-button\" onClick={downloadCSV}>Export Leads</button>\r\n        </div>\r\n        {/* Pagination */}\r\n        {pagination}\r\n        {/* Sidebar */}\r\n        <div className=\"overview-body-sidebar\">\r\n          <section className=\"payment-section\">\r\n            {!isMobile && (\r\n              <div>\r\n                <h2>GENERATED LEADS: </h2>\r\n                <div className='contact-counter'>{contactData?.length ?? 0}</div>\r\n              </div>\r\n            )}\r\n            <div className=\"payment-section-header\"></div>\r\n          </section>\r\n        </div>\r\n        \r\n      </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default Leads;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router';\r\nimport axios from 'axios';\r\nimport Cookie from 'js-cookie';\r\nimport CreateCard from '../../CreateCard/CreateCard';\r\n\r\nconst EditCard = () => {\r\n  const { id: userId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [cardData, setCardData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchCardData = async () => {\r\n      try {\r\n        const sessionToken = Cookie.get('session_token');\r\n        if (!sessionToken) {\r\n          navigate('/login');\r\n          return;\r\n        }\r\n        const response = await axios.get(`https://${process.env.REACT_APP_HOST}/api/${userId}/dashboard/cards`); // Adjust the API endpoint\r\n        setCardData(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching card data:', error);\r\n      }\r\n    };\r\n\r\n    fetchCardData();\r\n  }, [userId, navigate]);\r\n\r\n  return (\r\n    <div>\r\n      {cardData && (\r\n        <CreateCard initialValues={cardData?.cards[0]} cardId={cardData.cards[0]?.card_id} isEditing={true} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './LastContactsComponent.scss';\r\nimport ContactComponent from '../../Components/ContactComponent'; // Import the ContactComponent\r\n\r\nconst PAGE_SIZE = 5; // Number of contacts per page\r\nconst ROW_HEIGHT = 50; // Approximate height of each row in pixels\r\n\r\nconst LastContactsComponent = ({ contacts, count }) => {\r\n  // Ensure contacts is an array, if not, default to an empty array\r\n  const contactsArray = Array.isArray(contacts) ? contacts : [];\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [selectedMessage, setSelectedMessage] = useState(null); // Track the selected message for the modal\r\n\r\n  useEffect(() => {\r\n    // Calculate the total number of pages\r\n    const total = Math.ceil(count / PAGE_SIZE);\r\n    setTotalPages(total);\r\n  }, [count]);\r\n\r\n  // Get contacts for the current page\r\n  const startIndex = (currentPage - 1) * PAGE_SIZE;\r\n  const endIndex = startIndex + PAGE_SIZE;\r\n  const currentContacts = contactsArray.slice(startIndex, endIndex);\r\n\r\n  // Calculate the height of the table\r\n  const tableHeight = Math.max(PAGE_SIZE, currentContacts.length) * ROW_HEIGHT;\r\n\r\n  const handleNextPage = () => {\r\n    setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages));\r\n  };\r\n\r\n  const handlePrevPage = () => {\r\n    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));\r\n  };\r\n\r\n  // Function to handle selecting a message and opening the modal\r\n  const handleSelectMessage = (message) => {\r\n    setSelectedMessage(message);\r\n  };\r\n\r\n  // Function to close the modal\r\n  const closeModal = () => {\r\n    setSelectedMessage(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"last-contacts-component\">\r\n      <div className=\"table-container\" style={{ height: tableHeight }}>\r\n        <h1>Recent Leads</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Company</th>\r\n              <th>Email</th>\r\n              <th>Phone</th>\r\n              <th>Contact Date</th>\r\n              <th>Sector</th>\r\n              <th>Message</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {currentContacts.map((contact, index) => (\r\n              <tr key={index}>\r\n                <td>{contact.name || '-'}</td>\r\n                <td>{contact.company || '-'}</td>\r\n                <td>{contact.email || '-'}</td>\r\n                <td>{contact.phone || '-'}</td>\r\n                <td>{contact.contact_date}</td>\r\n                <td>{contact.sector || '-'}</td>\r\n                {/* Render the ContactComponent for each contact */}\r\n                <td>{contact.message || '-'}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div className=\"pagination\">\r\n        {/* Pagination controls go here */}\r\n      </div>\r\n      {/* Render the modal HTML structure conditionally */}\r\n   \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LastContactsComponent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Slider from 'react-slick'; // Import the Slider component\r\nimport 'slick-carousel/slick/slick.css'; // Import slick carousel styles\r\nimport 'slick-carousel/slick/slick-theme.css'; // Import slick carousel theme styles\r\nimport \"./Analytics.scss\";\r\n\r\nimport LastContactsComponent from '../Overview/Components/LastContactsComponent/LastContactsComponent';\r\nimport GraphComponent from '../Overview/Components/Graph/Graph';\r\n\r\nfunction Analytics({ leadsData, contacts, username }) {\r\n  // Provide default values for leadsData and contacts to prevent TypeError\r\n  const defaultLeadsData = leadsData || [];\r\n  const defaultContacts = contacts || [];\r\n  const [city, setCity] = useState('');\r\n  const ratio = ((defaultLeadsData.length / defaultContacts.length) * 100).toFixed(1) || 0;\r\n\r\n  useEffect(() => {\r\n    if (!leadsData || !Array.isArray(leadsData)) return;\r\n\r\n    // Extract cities from leadsData\r\n    const cities = leadsData.map(lead => lead.city);\r\n\r\n    // Count occurrences of each city\r\n    const cityCounts = {};\r\n    cities.forEach(city => {\r\n      cityCounts[city] = (cityCounts[city] || 0) + 1;\r\n    });\r\n\r\n    // Find the most dominant city\r\n    const sortedCities = Object.keys(cityCounts).sort((a, b) => cityCounts[b] - cityCounts[a]);\r\n    const mostDominant = sortedCities[0];\r\n\r\n    // Set the most dominant city\r\n    setCity(mostDominant);\r\n  }, [leadsData]);\r\n\r\n  // Settings for the Slider component\r\n  const sliderSettings = {\r\n    dots: true,\r\n    arrows: false,\r\n    infinite: false,\r\n    speed: 200,\r\n    slidesToShow: 2, // Show 2 squares at a time\r\n    slidesToScroll: 1,\r\n    swipeToSlide: true, // Enable swipe\r\n    responsive: [\r\n      {\r\n        breakpoint: 768, // Breakpoint for mobile\r\n        settings: {\r\n          slidesToShow: 1, // Show 1 square at a time on mobile\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div className='analytics-container'>\r\n      <div className=\"analytics-section\">\r\n        {/* Conditionally render different layouts based on screen size */}\r\n        {window.innerWidth <= 768 ? (\r\n          /* Render the Slider component on mobile */\r\n          <Slider {...sliderSettings}>\r\n            <div className=\"analytics-rectangle\">\r\n              <div>\r\n                <h1>{defaultContacts.length}</h1>\r\n                <p>Lead Count</p>\r\n              </div>\r\n              <hr className=\"divider\" />\r\n              <div>\r\n                <h1>{defaultLeadsData.length}</h1>\r\n                <p>Total Tap Count</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"analytics-rectangle\">\r\n              <div>\r\n                <h1>{ratio}%</h1>\r\n                <p>Tap-Lead ratio</p>\r\n              </div>\r\n              <hr className=\"divider\" />\r\n              <div>\r\n                <h1>{city}</h1>\r\n                <p>Dominant City</p>\r\n              </div>\r\n            </div>\r\n          </Slider>\r\n        ) : (\r\n          /* Render the squares directly on desktop */\r\n          <div className=\"analytics-rectangle\">\r\n            <div>\r\n              <h1>{defaultContacts.length}</h1>\r\n              <p>Lead Count</p>\r\n            </div>\r\n            <hr className=\"divider\" />\r\n            <div>\r\n              <h1>{defaultLeadsData.length}</h1>\r\n              <p>Total Tap Count</p>\r\n            </div>\r\n            <hr className=\"divider\" />\r\n            <div>\r\n              <h1>{ratio}%</h1>\r\n              <p>Tap-Lead ratio</p>\r\n            </div>\r\n            <hr className=\"divider\" />\r\n            <div>\r\n              <h1>{city}</h1>\r\n              <p>Dominant City</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"analytics-graph\">\r\n        <GraphComponent leadsData={defaultLeadsData} />\r\n      </div>\r\n      <div className=\"analytics-section\">\r\n        <LastContactsComponent\r\n          title=\"Last 5 Contacts\"\r\n          count={defaultContacts.length}\r\n          contacts={defaultContacts}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Analytics;\r\n","import React, { useState } from 'react';\r\nimport './SideNavigation.scss';\r\n\r\nconst SideNavigation = ({ handleTabClick }) => {\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  \r\n  const toggleDropdown = () => {\r\n    setShowDropdown(!showDropdown);\r\n  };\r\n\r\n  const toggleMenu = () => {\r\n    setShowMenu(!showMenu);\r\n  };\r\n\r\n  const handleNavItemClick = (tab) => {\r\n    handleTabClick(tab); // Call the handleTabClick function with the selected tab\r\n    setShowMenu(false); // Close the mobile menu after a navigation item is clicked\r\n  };\r\n\r\n  return (\r\n    <div className=\"overview-body-navigation\">\r\n      {/* Mobile Menu Button */}\r\n      <div className=\"mobile-menu-button\" onClick={toggleMenu}>\r\n        <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-menu.svg?v=1714064137\" alt=\"Menu\" className=\"menu-icon\" />\r\n      </div>\r\n      \r\n      <nav className={`side-navigation ${showMenu ? 'show' : ''}`}>\r\n      <div className=\"dashboard-header-logo\">\r\n            <div className=\"dashboard-logo\">\r\n              <span className=\"dashboard-logo-icon\">\r\n                <img src=\"https://res.cloudinary.com/dnho57ne8/image/upload/v1699913993/brava_fqk4h4.png\" alt=\"Logo\" />\r\n              </span>\r\n            </div>\r\n          </div>\r\n        <a onClick={() => handleNavItemClick('overview')} href=\"#\" className=\"nav-link\">\r\n          <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/dashboard.svg?v=1713982497\" alt=\"Dashboard\" className=\"nav-icon\" />\r\n          <span>Dashboard</span>\r\n        </a>\r\n        <div className=\"dropdown-wrapper\">\r\n          <div className=\"dropdown-header\" onClick={toggleDropdown}>\r\n            <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/account-balance-wallet.svg?v=1713982779\" alt=\"Cards\" className=\"nav-icon\" />\r\n            <span>Cards</span>\r\n          </div>\r\n          {showDropdown && (\r\n            <ul className=\"dropdown-content\">\r\n              <li onClick={() => handleNavItemClick('my-card')}>My Card</li>\r\n              <li onClick={() => handleNavItemClick('edit-card')}>Edit Card</li>\r\n            </ul>\r\n          )}\r\n        </div>\r\n        <a onClick={() => handleNavItemClick('leads')} href=\"#\" className=\"nav-link\">\r\n          <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/mail.svg?v=1713983246\" alt=\"Leads\" className=\"nav-icon\" />\r\n          <span>Leads</span>\r\n        </a>\r\n        <a href=\"#\" className=\"nav-link\">\r\n          <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/calendar-today.svg?v=1713983141\" alt=\"Calendar\" className=\"nav-icon\" />\r\n          <span>Calendar</span>\r\n        </a>\r\n        <a onClick={() => handleNavItemClick('account')} href=\"#\" className=\"nav-link\">\r\n          <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/settings.svg?v=1713983432\" alt=\"Settings\" className=\"nav-icon\" />\r\n          <span>Settings</span>\r\n        </a>\r\n        <a href=\"https://bravanfc.com\" target=\"_blank\" className=\"nav-link\">\r\n          <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/local-grocery-store.svg?v=1713983431\" alt=\"Store\" className=\"nav-icon\" />\r\n          <span>Store</span>\r\n        </a>\r\n        <a href=\"#\" className=\"nav-link\">\r\n          <img src=\"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/logout.svg?v=1713983567\" alt=\"Logout\" className=\"nav-icon\" />\r\n          <span>Logout</span>\r\n        </a>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideNavigation;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router';\r\nimport \"./Overview.scss\"\r\nimport Leads from './Components/Leads/Leads';\r\nimport Card from '../Cards/Cards'\r\nimport GraphComponent from './Components/Graph/Graph';\r\nimport EditCard from '../Components/EditCard/EditCard';\r\nimport Analytics from '../Analytics/Analytics';\r\n\r\nimport Cookie from 'js-cookie';\r\nimport SideNavigation from '../Components/SideNavigation/SideNavigation';\r\nimport Account from '../Account/Account'\r\n\r\nconst OverviewContent = ({ contactData, userId, leadsData, username }) => {\r\n  const navigate = useNavigate();\r\n  const { tab } = useParams();\r\n  const [isMenuOpen, setMenuOpen] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [selectedTab, setSelectedTab] = useState(tab || 'overview');\r\n\r\n  const contactsPerPage = 5;\r\n\r\n  // Calculate indexes of contacts to display on the current page\r\n  const indexOfLastContact = currentPage * contactsPerPage;\r\n  var currentContacts = '';\r\n  if (Array.isArray(contactData) && contactData.length > 0) {\r\n    // Calculate indexes of contacts to display on the current page\r\n    const indexOfLastContact = currentPage * contactsPerPage;\r\n    const indexOfFirstContact = indexOfLastContact - contactsPerPage;\r\n    \r\n    // Slice the contactData array to get the contacts for the current page\r\n    currentContacts = contactData.slice(indexOfFirstContact, indexOfLastContact);\r\n  }\r\n\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n\r\n  const handleTabClick = (tab) => {\r\n    navigate(`/${userId}/dashboard/${tab}`);\r\n    setSelectedTab(tab)\r\n    setMenuOpen(false);\r\n  };\r\n\r\n  const handleMenuClick = () => {\r\n    setMenuOpen(!isMenuOpen);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const sessionToken = Cookie.get('session_token');\r\n    if (!sessionToken) {\r\n      navigate('/login');\r\n    }\r\n  }, [navigate]);\r\n\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n\r\n  const toggleDropdown = () => {\r\n    setShowDropdown(!showDropdown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"overview\">\r\n        <SideNavigation handleTabClick={handleTabClick} /> \r\n        <div className=\"overview-body-main-content\">\r\n          {selectedTab === 'overview' && <Analytics leadsData={leadsData} username={username} contacts={contactData}/> }\r\n          {selectedTab === 'my-card' && <Card />}\r\n          {selectedTab === 'edit-card' && <EditCard />}\r\n          {selectedTab === 'leads' && <Leads leadsData={leadsData}  userId={userId}/>}\r\n          {selectedTab === 'account' && <Account />}\r\n          {/* Add more conditions for other tabs */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OverviewContent;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport './dashboard.scss';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Header from './Components/Header';\r\nimport OverviewContent from './Overview/Overview';\r\nimport Cards from './Cards/Cards';\r\nimport Cookie from 'js-cookie';\r\nimport GraphComponent from './Overview/Components/Graph/Graph';\r\n\r\nexport function Dashboard() {\r\n  const { id: userId, tab } = useParams();\r\n  const navigate = useNavigate();\r\n  const [userData, setUserData] = useState(null);\r\n  const [leadsData, setLeadsData] = useState(null);\r\n  const [contactData, setContactData] = useState(null)\r\n  const isDataFetched = useRef(false);\r\n\r\n  useEffect(() => {\r\n\r\n    // Check if userId exists before making the API call\r\n    if (!userId) return;\r\n\r\n    // Check if data is being fetched to avoid redundant API calls\r\n    if (isDataFetched.current) {\r\n      return;\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const sessionToken = Cookie.get('session_token');\r\n        if (!sessionToken) {\r\n          navigate('/login');\r\n          return;\r\n        }\r\n    \r\n        const response = await axios.get(`https://${process.env.REACT_APP_HOST}/api/${userId}/dashboard`, { withCredentials: true });\r\n    \r\n        // Extract username and profile_image_url from the response data object\r\n        const { username, profile_image_url } = response.data.userData;\r\n    \r\n        // Set userData state with extracted data\r\n        setUserData({ username, profile_image_url });\r\n    \r\n        // Set leadsData state with extracted data\r\n        setLeadsData(response.data.leadsData);\r\n        setContactData(response.data.contactsData)\r\n        \r\n        // Store username and profile image URL in localStorage\r\n        localStorage.setItem('profile_image_url', profile_image_url);\r\n        localStorage.setItem('username', username);\r\n    \r\n        // Update the ref to indicate that data has been fetched\r\n        isDataFetched.current = true;\r\n      } catch (error) {\r\n        console.log('Error fetching data:', error);\r\n      }\r\n    };\r\n    // Fetch data only if userId exists and data is not being fetched\r\n    fetchData();\r\n  }, [userId, navigate]);\r\n \r\n  \r\n  return (\r\n    <div>\r\n      {/* Render the Header component with default values if userData is null */}\r\n      <Header header_username={userData ? userData.username : 'Loading...'} profile_picture={userData ? userData.profile_image_url : 'default_profile_picture_url'} />\r\n      <div className=\"dashboard-body\">\r\n        {/* Pass the selected tab to the OverviewContent component */}\r\n        <OverviewContent selectedTab={tab}  contactData={contactData} username={userData?.username} userId={userId} leadsData={leadsData}/>\r\n        {/* Render Cards component */}\r\n        {tab === 'cards' && <Cards contactData={userData} />}\r\n        {/* Add other tab content here */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"names":["navigate","useNavigate","useEffect","Cookie","get","_jsxs","className","children","_jsx","Header","onClick","handleLogout","remove","localStorage","removeItem","_ref","leadsData","containerRef","useRef","dimensions","setDimensions","useState","width","height","resizeObserver","ResizeObserver","entries","entry","contentRect","observe","current","disconnect","Array","isArray","contactsPerDay","Sun","Mon","Tue","Wed","Thu","Fri","Sat","forEach","lead","dayOfWeek","Date","access_date","toLocaleDateString","weekday","daysOfWeek","data","map","day","x","y","ref","VictoryChart","VictoryLabel","text","textAnchor","style","fill","fontSize","VictoryAxis","tickValues","tickLabels","axis","stroke","dependentAxis","VictoryLine","parent","border","user_id","contact_id","name","company","email","message","contact_date","phone","sector","isMobile","window","innerWidth","formattedDate","isModalOpen","setIsModalOpen","toggleModal","marginRight","marginLeft","concat","location","href","_contactData$length","userId","contactData","setContactData","searchQuery","setSearchQuery","filterOption","setFilterOption","currentPage","setCurrentPage","loading","setLoading","async","response","axios","process","contacts","error","console","log","fetchContactData","filteredContacts","filter","contact","toLowerCase","includes","sort","a","b","indexOfLastContact","indexOfFirstContact","currentContacts","slice","pagination","length","from","Math","max","ceil","_","i","type","placeholder","value","onChange","e","target","ContactComponent","downloadCSV","csvData","join","row","push","csvContent","blob","Blob","saveAs","EditCard","_cardData$cards$","id","useParams","cardData","setCardData","fetchCardData","CreateCard","initialValues","cards","cardId","card_id","isEditing","count","contactsArray","totalPages","setTotalPages","selectedMessage","setSelectedMessage","total","startIndex","endIndex","tableHeight","index","username","defaultLeadsData","defaultContacts","city","setCity","ratio","toFixed","cities","cityCounts","mostDominant","Object","keys","Slider","dots","arrows","infinite","speed","slidesToShow","slidesToScroll","swipeToSlide","responsive","breakpoint","settings","GraphComponent","LastContactsComponent","title","handleTabClick","showDropdown","setShowDropdown","showMenu","setShowMenu","handleNavItemClick","tab","toggleMenu","src","alt","toggleDropdown","isMenuOpen","setMenuOpen","selectedTab","setSelectedTab","SideNavigation","Analytics","Card","Leads","Account","Dashboard","userData","setUserData","setLeadsData","isDataFetched","withCredentials","profile_image_url","contactsData","setItem","fetchData","header_username","profile_picture","OverviewContent","Cards"],"sourceRoot":""}