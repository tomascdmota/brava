{"version":3,"file":"static/js/954.659cc818.chunk.js","mappings":"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","sources":["components/Modal/Modal.js","pages/Card/CardComponent/CardComponent.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport './Modal.css'\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\nconst Modal = ({ isOpen, onClose }) => {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    company: '',\r\n    email: '',\r\n    message: '',\r\n  });\r\n\r\n  const {id: userId} = useParams()\r\n\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({ ...prevData, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n  axios.post(`https://${process.env.REACT_APP_HOST}/api/${userId}/message`, formData)\r\n  .then((res) => {\r\n    console.log('Response Headers:', res.headers);\r\n    if (res.status === 200) {\r\n      alert(\"Message sent successfully\");\r\n      setFormData({\r\n        name: '',\r\n        company: '',\r\n        email: '',\r\n        message: ''\r\n      });\r\n    }\r\n  })\r\n  .catch((err) => {\r\n    console.log(err.response.status);\r\n    console.log(err);\r\n  });\r\n\r\n\r\n    // Add your logic to handle form submission\r\n    console.log('Form submitted:', formData);\r\n    onClose(); // Close the modal after submission\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isOpen && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <button className=\"close-button\" onClick={onClose}>\r\n              X\r\n            </button>\r\n            <h2>GET IN TOUCH</h2>\r\n            <form onSubmit={handleSubmit}>\r\n              <label htmlFor=\"name\">Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"name\"\r\n                name=\"name\"\r\n                placeholder='Name'\r\n                value={formData.name}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n               <label htmlFor=\"company\">Company:</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"company\"\r\n                name=\"company\"\r\n                placeholder='Company'\r\n                value={formData.company}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n\r\n              <label htmlFor=\"email\">Email:</label>\r\n              <input\r\n                type=\"email\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                placeholder='Email'\r\n                value={formData.email}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n\r\n              <label htmlFor=\"message\">Message:</label>\r\n              <textarea\r\n                id=\"message\"\r\n                name=\"message\"\r\n                placeholder='What would you like to say?'\r\n                value={formData.message}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n\r\n              <button type=\"submit\">Submit</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { S3, GetObjectCommand } from '@aws-sdk/client-s3';\r\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\r\nimport vcf from 'vcf';\r\nimport { openDB } from 'idb';\r\nimport unorm from 'unorm';\r\nimport Modal from '../../../components/Modal/Modal';\r\nimport NotesLogo from './Logos/notes.png';\r\nimport GoogleReviewsLogo from './Logos/googlereview.png';\r\nimport './CardComponent.css';\r\n\r\n\r\nconst  FacebookLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-facebook.svg?v=1712083465';\r\nconst InstagramLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-instagram.svg?v=1712083465';\r\nconst LinkedInLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-linkedin.svg?v=1712083465';\r\nconst UrlLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/url.png?v=1712083467';\r\nconst MapsLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-google-maps-old.svg?v=1712083465';\r\nconst YouTubeLogo = \"https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-youtube.svg?v=1712083465\";\r\nconst PaypalLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-paypal.svg?v=1712083465'\r\nconst TiktokLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-tiktok.svg?v=1712083465'\r\nconst TwitterLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/icons8-twitterx.svg?v=1712083465'\r\nconst SpotifyLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/spotify.png?v=1712083467'\r\nconst VintedLogo = 'https://cdn.shopify.com/s/files/1/0733/7767/7577/files/vinted.jpg?v=1712083466'\r\n\r\n\r\n\r\n\r\nfunction CardComponent({\r\n  card_id,\r\n  id,\r\n  email,\r\n  username,\r\n  phone,\r\n  company,\r\n  title,\r\n  profile_image_url,\r\n  background_image_url,\r\n  onLoad,\r\n  facebook,\r\n  linkedin,\r\n  instagram,\r\n  google_reviews,\r\n  address,\r\n  youtube,\r\n  notes,\r\n  url,\r\n  paypal,\r\n  tiktok,\r\n  twitter,\r\n  spotify,\r\n  vinted\r\n}) {\r\n  const [image, setImage] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const accessKeyId = process.env.REACT_APP_AWS_ACCESS_KEY_ID;\r\n  const secretAccessKey =  process.env.REACT_APP_AWS_SECRET_ACCESS_KEY;\r\n  const Region =  process.env.REACT_APP_S3_REGION;\r\n  const Bucket =  process.env.REACT_APP_BUCKET;\r\n  let mapsUrl;\r\n  console.log(id)\r\n\r\n  useEffect(() => {\r\n    console.log('CardComponent useEffect triggered');\r\n  \r\n    let isMounted = true;\r\n  \r\n    const loadImageAndSetState = async () => {\r\n  \r\n      const imageBuffer = await loadImageFromIndexedDB();\r\n  \r\n      if (isMounted) {\r\n        if (imageBuffer) {\r\n          const blob = new Blob([imageBuffer], { type: 'image/jpg' });\r\n          setImage(blob);\r\n          setLoading(false);\r\n        } else {\r\n          fetchImage();\r\n        }\r\n      }\r\n    };\r\n  \r\n    loadImageAndSetState();\r\n  \r\n    return () => {\r\n      isMounted = false;\r\n  \r\n      if (image) {\r\n        URL.revokeObjectURL(image);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  \r\n  const openModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n  const openGoogleMaps = () => {\r\n    // Construct the Google Maps URL with the address as a query parameter\r\n     mapsUrl = `https://www.google.com/maps/search/?api=1&query=${address}`;\r\n\r\n    // Open a new window or tab with the Google Maps URL\r\n    window.open(mapsUrl, '_blank');\r\n  };\r\n  const initIndexedDB = async () => {\r\n    try {\r\n      const db = await openDB('brava-db', 1, {\r\n        upgrade(db) {\r\n          if (!db.objectStoreNames.contains('images')) {\r\n            const imagesStore = db.createObjectStore('images', { keyPath: 'key' });\r\n            imagesStore.createIndex('url', 'url', { unique: true });\r\n          }\r\n        },\r\n      });\r\n      return db;\r\n    } catch (error) {\r\n      console.error('Error initializing IndexedDB:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n \r\n\r\n  const saveImageToIndexedDB = async (imageBlob) => {\r\n    try {\r\n      const db = await initIndexedDB();\r\n      const tx = db.transaction('images', 'readwrite');\r\n      const store = tx.objectStore('images');\r\n  \r\n      // Use a unique key, such as the S3 key, assuming it's unique for each image\r\n      const key = 'profileImage';\r\n      \r\n      // Create an object with a URL (if needed) and the image data\r\n      const data = {\r\n        key,\r\n        url: profile_image_url,  // Add the URL if it's necessary for your use case\r\n        data: imageBlob,\r\n      };\r\n  \r\n      // Store the data in IndexedDB\r\n      store.put(data);\r\n  \r\n      // Complete the transaction\r\n      await tx.complete;\r\n      \r\n      console.log('Image stored in IndexedDB:', data);\r\n    } catch (error) {\r\n      console.error('Error storing image in IndexedDB:', error);\r\n    }\r\n  };\r\n\r\n  const loadImageFromIndexedDB = async () => {\r\n    try {\r\n      const db = await initIndexedDB();\r\n      const tx = db.transaction('images');\r\n      const store = tx.objectStore('images');\r\n      const entry = await store.get('profileImage');\r\n  \r\n      return entry ? entry.data : null;\r\n    } catch (error) {\r\n      console.error('Error loading from IndexedDB:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const fetchImage = async () => {\r\n    try {\r\n      const s3Client = new S3({\r\n        credentials: {\r\n          accessKeyId,\r\n          secretAccessKey,\r\n        },\r\n        region: Region,\r\n      });\r\n  \r\n      // Parse the profile_image_url to extract the S3 key\r\n      const urlObject = new URL(profile_image_url);\r\n      const key = decodeURIComponent(urlObject.pathname.replace(/^\\//, ''));\r\n  \r\n      const getObjectParams = {\r\n        Bucket,\r\n        Key: key,\r\n      };\r\n  \r\n      const command = new GetObjectCommand(getObjectParams);\r\n      const response = await s3Client.send(command);\r\n  \r\n     \r\n  \r\n      const blob = new Blob([response.Body], { type: response.ContentType });\r\n      saveImageToIndexedDB(blob);\r\n      // Save the image Blob directly to the state\r\n      setImage(blob);\r\n      setLoading(false);\r\n  \r\n      if (onLoad) {\r\n        onLoad();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching image:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const loadImageAndSetState = async () => {\r\n      const imageBuffer = await loadImageFromIndexedDB();\r\n\r\n      if (imageBuffer) {\r\n        const blob = new Blob([imageBuffer], { type: 'image/jpg' });\r\n        setImage(blob);\r\n        setLoading(false);\r\n      } else {\r\n        fetchImage();\r\n      }\r\n    };\r\n\r\n    loadImageAndSetState();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n\r\n      if (image) {\r\n        URL.revokeObjectURL(image);\r\n      }\r\n    };\r\n  }, [profile_image_url, Bucket, Region, accessKeyId, secretAccessKey, onLoad]);\r\n\r\n\r\n\r\n  const saveToContacts = async () => {\r\n    try {\r\n      const card = new vcf();\r\n      const imageBuffer = await loadImageFromIndexedDB();\r\n  \r\n      if (!imageBuffer) {\r\n        console.error('Image not found in IndexedDB.');\r\n        return;\r\n      }\r\n  \r\n      // Set basic properties\r\n  \r\n      // Manually encode special characters in the names\r\n      const removeDiacritics = (str) => unorm.nfkd(str).replace(/[\\u0300-\\u036f]/g, '');\r\n      const decodedUsername = removeDiacritics(decodeURIComponent(username));\r\n      const decodedTitle = removeDiacritics(decodeURIComponent(title));\r\n      const decodedNotes = removeDiacritics(decodeURIComponent(notes))\r\n      const decodedAddress = removeDiacritics(decodeURIComponent(address))\r\n      // Set structured name with properly encoded values\r\n      card.add('n', [decodedUsername]);\r\n  \r\n      // Set formatted name with the full, properly encoded name\r\n      card.add('fn', [decodedUsername]);\r\n  \r\n      card.add('org', company);\r\n      card.add('tel', phone);\r\n      card.add('email', email);\r\n  \r\n      // Set additional properties\r\n      card.add('title', [decodedTitle]);\r\n      card.add('url', `https://app.bravanfc.com/${id}/cards/${card_id}`);\r\n  \r\n      // Set social media properties\r\n      if (facebook) {\r\n        card.add('x-socialprofile', facebook, { type: 'Facebook' });\r\n      }\r\n      if (instagram) {\r\n        card.add('x-socialprofile', instagram, { type: 'Instagram' });\r\n      }\r\n      if (linkedin) {\r\n        card.add('x-socialprofile', linkedin, { type: 'Linkedin' });\r\n      }\r\n      if (youtube) {\r\n        card.add('x-socialprofile', youtube, { type: 'Youtube' });\r\n      }\r\n      if(notes) {\r\n        card.add('note', [decodedNotes])\r\n      }\r\n      if(twitter){\r\n        card.add('x-socialprofile', twitter, {type: 'Twitter'});\r\n      }\r\n      if(paypal){\r\n        card.add('x-socialprofile', paypal, {type: \"Paypal\"});\r\n      }\r\n      if(tiktok){\r\n        card.add('x-socialprofile', tiktok, {type: \"TikTok\"});\r\n      }\r\n      if(spotify){\r\n        card.add('x-socialprofile', spotify, {type: \"Spotify\"});\r\n      }\r\n      if(vinted){\r\n        card.add('x-socialprofile', vinted, {type: \"Vinted\"});\r\n      }\r\n  \r\n  \r\n      // Set address\r\n      card.add('adr', [decodedAddress]);\r\n\r\n      // Extract the S3 key from the profile_image_url\r\n      const urlObject = new URL(profile_image_url);\r\n      const imageKey = decodeURIComponent(urlObject.pathname.replace(/^\\//, ''));\r\n  \r\n      // Generate a pre-signed URL for the image\r\n      const imageURL = await generatePresignedURL(imageKey);\r\n  \r\n      const encodedImage = await fetchAndEncodeImage(imageURL);\r\n      if (!encodedImage) {\r\n        console.error('Error fetching and encoding image.');\r\n        return;\r\n      }\r\n  \r\n      // Set image in vCard\r\n      card.add('photo', encodedImage, { encoding: 'b', type: 'image/jpeg' });\r\n  \r\n      // Generate vCard data as a string\r\n      const vCardData = card.toString('3.0');\r\n      console.log(vCardData);\r\n  \r\n      // Create a Blob from the vCard data with explicit UTF-8 encoding\r\n      const vcard_blob = new Blob([new TextEncoder().encode(vCardData)], {\r\n        type: 'text/vcard;charset=utf-8',\r\n      });\r\n  \r\n      // Open a new URL to prompt the user to add the contact\r\n      const downloadLink = document.createElement('a');\r\n      downloadLink.href = URL.createObjectURL(vcard_blob);\r\n      downloadLink.download = 'contact.vcf';\r\n  \r\n      // Trigger a click event to simulate a download prompt\r\n       // Redirect the user to the vCard file\r\n    window.location.href = URL.createObjectURL(vcard_blob);\r\n\r\n    // Release the object URL\r\n    URL.revokeObjectURL(vcard_blob);\r\n    } catch (error) {\r\n      console.error('Error saving to contacts:', error);\r\n    }\r\n  };\r\n  \r\n  // Function to fetch and encode the image\r\n  const fetchAndEncodeImage = async (imageUrl) => {\r\n    try {\r\n      const response = await fetch(imageUrl);\r\n      const imageBlob = await response.blob();\r\n  \r\n      // Resize and compress the image with a lower quality\r\n      const resizedAndCompressedBase64 = await resizeAndCompressImage(imageBlob, {\r\n        maxWidth: 800,\r\n        maxHeight: 800,\r\n        quality: 0.9, // Adjust the quality as needed\r\n      });\r\n  \r\n      return resizedAndCompressedBase64;\r\n    } catch (error) {\r\n      console.error('Error fetching, resizing, and encoding image:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  const resizeAndCompressImage = async (blob, options) => {\r\n    try {\r\n      const image = new Image();\r\n      image.src = URL.createObjectURL(blob);\r\n  \r\n      await new Promise((resolve, reject) => {\r\n        image.onload = resolve;\r\n        image.onerror = reject;\r\n      });\r\n  \r\n      const { maxWidth, maxHeight, quality } = options;\r\n  \r\n      let width = image.width;\r\n      let height = image.height;\r\n  \r\n      if (width > height) {\r\n        if (width > maxWidth) {\r\n          height *= maxWidth / width;\r\n          width = maxWidth;\r\n        }\r\n      } else {\r\n        if (height > maxHeight) {\r\n          width *= maxHeight / height;\r\n          height = maxHeight;\r\n        }\r\n      }\r\n  \r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      const context = canvas.getContext('2d');\r\n  \r\n      // Draw the image on the canvas progressively\r\n      context.drawImage(image, 0, 0, width, height);\r\n  \r\n      // Convert the canvas content to a blob\r\n      const resizedBlob = await new Promise((resolve) => {\r\n        canvas.toBlob(resolve, 'image/jpeg', quality);\r\n      });\r\n  \r\n      // Convert the resized blob to base64\r\n      const resizedBlobBuffer = await new Response(resizedBlob).arrayBuffer();\r\n      const resizedBlobBase64 = btoa(\r\n        new Uint8Array(resizedBlobBuffer).reduce((data, byte) => data + String.fromCharCode(byte), '')\r\n      );\r\n  \r\n      return resizedBlobBase64;\r\n    } catch (error) {\r\n      console.error('Error resizing and compressing image:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  const generatePresignedURL = async (imageKey) => {\r\n    try {\r\n      const s3Client = new S3({\r\n        region: 'eu-west-2',\r\n        credentials: {\r\n          accessKeyId: accessKeyId,\r\n          secretAccessKey: secretAccessKey,\r\n        },\r\n      });\r\n  \r\n      const params = {\r\n        Bucket: 'brava-bucket',\r\n        Key: imageKey,\r\n        Expires: 900,\r\n      };\r\n  \r\n      const signedURL =  getSignedUrl(s3Client, new GetObjectCommand(params));\r\n      console.log(signedURL)\r\n      return signedURL;\r\n    } catch (error) {\r\n      console.error('Error generating pre-signed URL:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleGetInTouch = () => {\r\n    try {\r\n      // Instead of triggering a download, open the modal\r\n      openModal();\r\n    } catch (error) {\r\n      console.error('Error opening modal:', error);\r\n    }\r\n  };\r\n  return (\r\n    <div className={`card-component ${loading ? 'loading' : ''}`}>\r\n      <div className=\"card-background\" style={{ backgroundImage: `url(${background_image_url})` }}></div>\r\n      <div className=\"card-component-header\">\r\n        {loading ? (\r\n          <p>Loading...</p>\r\n        ) : (\r\n          <>\r\n            {profile_image_url && <img className=\"card-image\" rel='preload'  loading=\"lazy\" src={profile_image_url} alt=\"Profile\" />}\r\n          </>\r\n        )}\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <h3>{username}, <span>{title}</span></h3>\r\n        <h5>{company}</h5>\r\n        <p></p>\r\n        <div className=\"card-buttons\">\r\n          <button onClick={saveToContacts}>SAVE CONTACT</button>\r\n        <button className=\"fab\" onClick={handleGetInTouch}>\r\n          EXCHANGE CONTACT\r\n        </button>\r\n        </div>\r\n        <div className=\"social-icons\">\r\n          {url && <a href={url}><img rel='preload' className=\"url\" loading=\"lazy\" src={UrlLogo} alt=\"Url\" focusable /></a>}\r\n          {google_reviews && <a href={google_reviews}><img rel='preload' loading=\"lazy\" src={GoogleReviewsLogo} alt=\"Instagram\" focusable /></a>}\r\n          {instagram && <a href={instagram}><img rel='preload' loading=\"lazy\"src={InstagramLogo} alt=\"Instagram\" focusable /></a>}\r\n          {facebook && <a href={facebook}><img rel='preload' loading=\"lazy\"src={FacebookLogo} alt=\"Facebook\" focusable /></a>}\r\n          {linkedin && <a href={linkedin}><img rel='preload' loading=\"lazy\"src={LinkedInLogo} alt=\"LinkedIn\" focusable /></a>}\r\n          {youtube && <a href={youtube}><img rel='preload' loading=\"lazy\"src={YouTubeLogo} alt=\"YouTube\" focusable /></a>}\r\n          {paypal &&<a href={paypal}><img rel='preload' loading=\"lazy\"src={PaypalLogo} alt=\"Paypal\" focusable /></a>}\r\n          {twitter &&<a href={twitter}><img rel='preload' loading=\"lazy\"src={TwitterLogo} alt=\"Twitter\" focusable /></a>}\r\n          {tiktok &&<a href={tiktok}><img rel='preload' loading=\"lazy\"src={TiktokLogo} alt=\"TikTok\" focusable /></a>}\r\n          {spotify &&<a  href={spotify}><img rel='preload' className='spotify' loading=\"lazy\"src={SpotifyLogo} alt=\"Spotify\" focusable /></a>}\r\n          {vinted &&<a  href={vinted}><img rel='preload' className='spotify' loading=\"lazy\"src={VintedLogo} alt=\"Vinted\" focusable /></a>}\r\n          {notes && <a  href={notes}><img rel='preload' loading=\"lazy\"style={{marginBottom: \"10px\"}} src={NotesLogo} alt=\"Notes\" focusable /></a>}\r\n          {address && <a href={mapsUrl} onClick={openGoogleMaps}><img rel='preload' loading='lazy' src={MapsLogo} alt='Maps' focusable/></a>}\r\n        </div>\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onClose={closeModal} />\r\n    </div>\r\n  );\r\n}\r\n\r\nCardComponent.propTypes = {\r\n  email: PropTypes.string.isRequired,\r\n  phone: PropTypes.string.isRequired,\r\n  company: PropTypes.string.isRequired,\r\n  profile_image_url: PropTypes.string,\r\n  onLoad: PropTypes.func,\r\n  card_id: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  facebook: PropTypes.string.isRequired,\r\n  linkedin: PropTypes.string.isRequired,\r\n  instagram: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CardComponent;"],"names":["_ref","isOpen","onClose","formData","setFormData","useState","name","company","email","message","id","userId","useParams","handleChange","e","value","target","prevData","_jsx","_Fragment","children","className","_jsxs","onClick","onSubmit","preventDefault","axios","post","concat","process","then","res","console","log","headers","status","alert","catch","err","response","htmlFor","type","placeholder","onChange","required","card_id","username","phone","title","profile_image_url","background_image_url","onLoad","facebook","linkedin","instagram","google_reviews","address","youtube","notes","url","paypal","tiktok","twitter","spotify","vinted","image","setImage","loading","setLoading","isModalOpen","setIsModalOpen","accessKeyId","secretAccessKey","Region","Bucket","mapsUrl","useEffect","isMounted","async","imageBuffer","loadImageFromIndexedDB","blob","Blob","fetchImage","loadImageAndSetState","URL","revokeObjectURL","initIndexedDB","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","createIndex","unique","error","store","transaction","objectStore","entry","get","data","s3Client","S3","credentials","region","urlObject","key","decodeURIComponent","pathname","replace","getObjectParams","Key","command","GetObjectCommand","send","Body","ContentType","tx","imageBlob","put","complete","saveImageToIndexedDB","fetchAndEncodeImage","fetch","imageUrl","resizeAndCompressImage","maxWidth","maxHeight","quality","options","Image","src","createObjectURL","Promise","resolve","reject","onload","onerror","width","height","canvas","document","createElement","getContext","drawImage","resizedBlob","toBlob","resizedBlobBuffer","Response","arrayBuffer","btoa","Uint8Array","reduce","byte","String","fromCharCode","generatePresignedURL","params","imageKey","Expires","signedURL","getSignedUrl","style","backgroundImage","rel","alt","card","vcf","removeDiacritics","str","unorm","decodedUsername","decodedTitle","decodedNotes","decodedAddress","add","imageURL","encodedImage","encoding","vCardData","toString","vcard_blob","TextEncoder","encode","downloadLink","href","download","window","location","handleGetInTouch","focusable","GoogleReviewsLogo","marginBottom","openGoogleMaps","open","Modal","closeModal"],"sourceRoot":""}